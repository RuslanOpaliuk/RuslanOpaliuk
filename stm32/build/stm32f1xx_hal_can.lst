ARM GAS  /tmp/cc0fpaGl.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f1xx_hal_can.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_CAN_MspInit,"ax",%progbits
  18              		.align	1
  19              		.weak	HAL_CAN_MspInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	HAL_CAN_MspInit:
  25              	.LVL0:
  26              	.LFB67:
  27              		.file 1 "drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c"
   1:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
   2:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ******************************************************************************
   3:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @file    stm32f1xx_hal_can.c
   4:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @author  MCD Application Team
   5:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Configuration functions
  10:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Control functions
  11:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Interrupts management
  12:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Callbacks functions
  13:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
  15:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   @verbatim
  16:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
  17:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                         ##### How to use this driver #####
  18:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
  19:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
  20:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
  21:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_MspInit():
  22:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  23:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****          (++) Configure CAN pins
  24:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  25:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Configure CAN pins as alternate function open-drain
  26:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  27:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  28:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  29:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
  30:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
  31:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/cc0fpaGl.s 			page 2


  32:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  33:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
  34:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  35:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  36:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           functions:
  37:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  38:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  39:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  40:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  41:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           messages.
  42:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  43:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  44:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           can be used:
  45:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  46:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  message.
  47:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  48:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  message.
  49:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  50:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  mailboxes.
  51:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  52:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  in a Tx mailbox.
  53:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  54:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  55:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  56:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  57:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  58:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  59:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           stored in the Rx Fifo.
  60:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  61:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  62:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  63:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  64:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  65:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  66:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *** Polling mode operation ***
  67:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       ==============================
  68:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
  69:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Reception:
  70:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  71:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  until at least one message is received.
  72:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  73:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  74:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Transmission:
  75:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
  76:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
  77:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Then request transmission of a message using
  78:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  79:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  80:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  81:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *** Interrupt mode operation ***
  82:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       ================================
  83:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
  84:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  85:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           function. Then, the process can be controlled through the
  86:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
  87:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
  88:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/cc0fpaGl.s 			page 3


  89:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Notifications can be deactivated using
  90:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
  91:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  92:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
  93:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
  94:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
  95:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
  96:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           here.
  97:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
  98:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
  99:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 100:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 101:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 102:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  read, the notification can be activated again.
 103:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 104:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 105:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *** Sleep mode ***
 106:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       ==================
 107:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
 108:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 109:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 110:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 111:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           be completed.
 112:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 113:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 114:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           will be entered.
 115:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 116:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 117:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 118:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 119:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 120:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 121:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 122:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 123:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) The wake-up from sleep mode can be triggered by two ways:
 124:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 125:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 126:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 127:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  if automatic wake up mode is enabled.
 128:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 129:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *** Callback registration ***
 130:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   =============================================
 131:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 132:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   The compilation define  USE_HAL_CAN_REGISTER_CALLBACKS when set to 1
 133:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   allows the user to configure dynamically the driver callbacks.
 134:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Use Function @ref HAL_CAN_RegisterCallback() to register an interrupt callback.
 135:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 136:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Function @ref HAL_CAN_RegisterCallback() allows to register following callbacks:
 137:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 138:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 139:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 140:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 141:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 142:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 143:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
 144:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 145:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
ARM GAS  /tmp/cc0fpaGl.s 			page 4


 146:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 147:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 148:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 149:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 150:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 151:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 152:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 153:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   and a pointer to the user callback function.
 154:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 155:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Use function @ref HAL_CAN_UnRegisterCallback() to reset a callback to the default
 156:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   weak function.
 157:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   @ref HAL_CAN_UnRegisterCallback takes as parameters the HAL peripheral handle,
 158:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   and the Callback ID.
 159:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   This function allows to reset following callbacks:
 160:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 161:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 162:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 163:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 164:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 165:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 166:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
 167:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 168:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 169:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 170:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 171:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 172:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 173:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 174:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 175:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 176:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   By default, after the @ref HAL_CAN_Init() and when the state is HAL_CAN_STATE_RESET,
 177:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   all callbacks are set to the corresponding weak functions:
 178:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   example @ref HAL_CAN_ErrorCallback().
 179:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Exception done for MspInit and MspDeInit functions that are
 180:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   reset to the legacy weak function in the @ref HAL_CAN_Init()/ @ref HAL_CAN_DeInit() only when
 181:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   these callbacks are null (not registered beforehand).
 182:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if not, MspInit or MspDeInit are not null, the @ref HAL_CAN_Init()/ @ref HAL_CAN_DeInit()
 183:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 184:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 185:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Callbacks can be registered/unregistered in HAL_CAN_STATE_READY state only.
 186:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 187:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   in HAL_CAN_STATE_READY or HAL_CAN_STATE_RESET state,
 188:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 189:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   In that case first register the MspInit/MspDeInit user callbacks
 190:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   using @ref HAL_CAN_RegisterCallback() before calling @ref HAL_CAN_DeInit()
 191:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   or @ref HAL_CAN_Init() function.
 192:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 193:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   When The compilation define USE_HAL_CAN_REGISTER_CALLBACKS is set to 0 or
 194:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   not defined, the callback registration feature is not available and all callbacks
 195:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   are set to the corresponding weak functions.
 196:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 197:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   @endverbatim
 198:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ******************************************************************************
 199:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @attention
 200:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
 201:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 202:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * All rights reserved.</center></h2>
ARM GAS  /tmp/cc0fpaGl.s 			page 5


 203:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
 204:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 205:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * the "License"; You may not use this file except in compliance with the
 206:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * License. You may obtain a copy of the License at:
 207:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *                        opensource.org/licenses/BSD-3-Clause
 208:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
 209:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ******************************************************************************
 210:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 211:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 212:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 213:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #include "stm32f1xx_hal.h"
 214:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 215:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @addtogroup STM32F1xx_HAL_Driver
 216:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 217:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 218:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 219:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if defined(CAN1)
 220:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 221:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN CAN
 222:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief CAN driver modules
 223:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 224:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 225:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 226:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 227:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 228:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 229:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 230:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif
 231:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 232:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 233:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 234:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 235:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 236:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 237:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 238:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 239:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
 240:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 241:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 242:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 243:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 244:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
 245:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 246:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 247:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 248:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 249:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 250:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 251:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief    Initialization and Configuration functions
 252:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
 253:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
 254:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 255:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 256:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 257:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 258:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
 259:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
ARM GAS  /tmp/cc0fpaGl.s 			page 6


 260:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 261:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
 262:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 263:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
 264:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 265:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 266:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 267:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 268:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 269:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 270:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 271:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 272:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 273:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 274:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 275:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 276:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
 277:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 278:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 279:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan == NULL)
 280:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 281:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 282:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 283:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 284:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check the parameters */
 285:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 286:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 287:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 288:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 289:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 290:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 291:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 292:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 293:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 294:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 295:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 296:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 297:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 298:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 299:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 300:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 301:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Reset callbacks to legacy functions */
 302:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0M
 303:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0F
 304:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1M
 305:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1F
 306:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbo
 307:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbo
 308:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbo
 309:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbo
 310:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbo
 311:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbo
 312:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCal
 313:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFr
 314:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCal
 315:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 316:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (hcan->MspInitCallback == NULL)
ARM GAS  /tmp/cc0fpaGl.s 			page 7


 317:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 318:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 319:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 320:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 321:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 322:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->MspInitCallback(hcan);
 323:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 324:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 325:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
 326:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 327:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 328:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 329:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
 330:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 331:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 332:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 333:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Request initialisation */
 334:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 335:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 336:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Get tick */
 337:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   tickstart = HAL_GetTick();
 338:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 339:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Wait initialisation acknowledge */
 340:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 341:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 342:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 343:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 344:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Update error code */
 345:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 346:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 347:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Change CAN state */
 348:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 349:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 350:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
 351:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 352:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 353:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 354:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Exit from sleep mode */
 355:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 356:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 357:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Get tick */
 358:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   tickstart = HAL_GetTick();
 359:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 360:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
 361:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 362:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 363:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 364:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 365:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Update error code */
 366:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 367:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 368:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Change CAN state */
 369:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 370:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 371:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
 372:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 373:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
ARM GAS  /tmp/cc0fpaGl.s 			page 8


 374:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 375:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the time triggered communication mode */
 376:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 377:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 378:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 379:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 380:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 381:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 382:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 383:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 384:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 385:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the automatic bus-off management */
 386:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 387:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 388:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 389:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 390:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 391:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 392:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 393:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 394:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 395:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the automatic wake-up mode */
 396:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
 397:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 398:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 399:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 400:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 401:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 402:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 403:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 404:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 405:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the automatic retransmission */
 406:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 407:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 408:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 409:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 410:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 411:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 412:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 413:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 414:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 415:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 416:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 417:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 418:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 419:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 420:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 421:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 422:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 423:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 424:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 425:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the transmit FIFO priority */
 426:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 427:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 428:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 429:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 430:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
ARM GAS  /tmp/cc0fpaGl.s 			page 9


 431:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 432:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 433:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 434:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 435:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the bit timing register */
 436:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 437:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 438:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 439:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 440:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 441:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 442:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Initialize the error code */
 443:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 444:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 445:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Initialize the CAN state */
 446:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 447:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 448:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return function status */
 449:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return HAL_OK;
 450:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 451:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 452:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 453:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
 454:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         reset values.
 455:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 456:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 457:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 458:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 459:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 460:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 461:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 462:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan == NULL)
 463:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 464:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 465:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 466:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 467:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check the parameters */
 468:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 469:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 470:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Stop the CAN module */
 471:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   (void)HAL_CAN_Stop(hcan);
 472:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 473:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 474:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->MspDeInitCallback == NULL)
 475:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 476:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->MspDeInitCallback = HAL_CAN_MspDeInit; /* Legacy weak MspDeInit */
 477:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 478:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 479:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 480:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->MspDeInitCallback(hcan);
 481:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 482:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
 483:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 484:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
 485:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 486:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 487:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Reset the CAN peripheral */
ARM GAS  /tmp/cc0fpaGl.s 			page 10


 488:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 489:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 490:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 491:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 492:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 493:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Change CAN state */
 494:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 495:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 496:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return function status */
 497:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return HAL_OK;
 498:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 499:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 500:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 501:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 502:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 503:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 504:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
 505:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 506:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 507:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
  28              		.loc 1 507 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 508:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 509:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
  33              		.loc 1 509 3 view .LVU1
 510:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 511:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 512:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 513:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
 514:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
  34              		.loc 1 514 1 is_stmt 0 view .LVU2
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE67:
  39              		.section	.text.HAL_CAN_Init,"ax",%progbits
  40              		.align	1
  41              		.global	HAL_CAN_Init
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  46              	HAL_CAN_Init:
  47              	.LVL1:
  48              	.LFB65:
 275:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
  49              		.loc 1 275 1 is_stmt 1 view -0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
 276:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  53              		.loc 1 276 3 view .LVU4
 279:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  54              		.loc 1 279 3 view .LVU5
 279:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  55              		.loc 1 279 6 is_stmt 0 view .LVU6
ARM GAS  /tmp/cc0fpaGl.s 			page 11


  56 0000 0028     		cmp	r0, #0
  57 0002 00F0A180 		beq	.L21
 275:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
  58              		.loc 1 275 1 view .LVU7
  59 0006 38B5     		push	{r3, r4, r5, lr}
  60              	.LCFI0:
  61              		.cfi_def_cfa_offset 16
  62              		.cfi_offset 3, -16
  63              		.cfi_offset 4, -12
  64              		.cfi_offset 5, -8
  65              		.cfi_offset 14, -4
  66 0008 0446     		mov	r4, r0
 285:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
  67              		.loc 1 285 3 is_stmt 1 view .LVU8
 286:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
  68              		.loc 1 286 3 view .LVU9
 287:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
  69              		.loc 1 287 3 view .LVU10
 288:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
  70              		.loc 1 288 3 view .LVU11
 289:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
  71              		.loc 1 289 3 view .LVU12
 290:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
  72              		.loc 1 290 3 view .LVU13
 291:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
  73              		.loc 1 291 3 view .LVU14
 292:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  74              		.loc 1 292 3 view .LVU15
 293:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  75              		.loc 1 293 3 view .LVU16
 294:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  76              		.loc 1 294 3 view .LVU17
 295:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  77              		.loc 1 295 3 view .LVU18
 296:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  78              		.loc 1 296 3 view .LVU19
 326:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  79              		.loc 1 326 3 view .LVU20
 326:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  80              		.loc 1 326 11 is_stmt 0 view .LVU21
  81 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 326:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  82              		.loc 1 326 6 view .LVU22
  83 000e D3B1     		cbz	r3, .L26
  84              	.LVL2:
  85              	.L4:
 334:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  86              		.loc 1 334 3 is_stmt 1 view .LVU23
  87 0010 2268     		ldr	r2, [r4]
  88 0012 1368     		ldr	r3, [r2]
  89 0014 43F00103 		orr	r3, r3, #1
  90 0018 1360     		str	r3, [r2]
 337:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  91              		.loc 1 337 3 view .LVU24
 337:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  92              		.loc 1 337 15 is_stmt 0 view .LVU25
  93 001a FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/cc0fpaGl.s 			page 12


  94              	.LVL3:
  95 001e 0546     		mov	r5, r0
  96              	.LVL4:
 340:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  97              		.loc 1 340 3 is_stmt 1 view .LVU26
  98              	.L5:
 340:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  99              		.loc 1 340 9 view .LVU27
 340:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 100              		.loc 1 340 15 is_stmt 0 view .LVU28
 101 0020 2368     		ldr	r3, [r4]
 340:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 102              		.loc 1 340 25 view .LVU29
 103 0022 5A68     		ldr	r2, [r3, #4]
 340:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 104              		.loc 1 340 9 view .LVU30
 105 0024 12F0010F 		tst	r2, #1
 106 0028 10D1     		bne	.L27
 342:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 107              		.loc 1 342 5 is_stmt 1 view .LVU31
 342:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 108              		.loc 1 342 10 is_stmt 0 view .LVU32
 109 002a FFF7FEFF 		bl	HAL_GetTick
 110              	.LVL5:
 342:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 111              		.loc 1 342 24 view .LVU33
 112 002e 401B     		subs	r0, r0, r5
 342:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 113              		.loc 1 342 8 view .LVU34
 114 0030 0A28     		cmp	r0, #10
 115 0032 F5D9     		bls	.L5
 345:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 116              		.loc 1 345 7 is_stmt 1 view .LVU35
 345:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 117              		.loc 1 345 23 is_stmt 0 view .LVU36
 118 0034 636A     		ldr	r3, [r4, #36]
 119 0036 43F40033 		orr	r3, r3, #131072
 120 003a 6362     		str	r3, [r4, #36]
 348:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 121              		.loc 1 348 7 is_stmt 1 view .LVU37
 348:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 122              		.loc 1 348 19 is_stmt 0 view .LVU38
 123 003c 0523     		movs	r3, #5
 124 003e 84F82030 		strb	r3, [r4, #32]
 350:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 125              		.loc 1 350 7 is_stmt 1 view .LVU39
 350:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 126              		.loc 1 350 14 is_stmt 0 view .LVU40
 127 0042 0120     		movs	r0, #1
 128              	.L3:
 450:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 129              		.loc 1 450 1 view .LVU41
 130 0044 38BD     		pop	{r3, r4, r5, pc}
 131              	.LVL6:
 132              	.L26:
 329:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 133              		.loc 1 329 5 is_stmt 1 view .LVU42
ARM GAS  /tmp/cc0fpaGl.s 			page 13


 134 0046 FFF7FEFF 		bl	HAL_CAN_MspInit
 135              	.LVL7:
 329:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 136              		.loc 1 329 5 is_stmt 0 view .LVU43
 137 004a E1E7     		b	.L4
 138              	.LVL8:
 139              	.L27:
 355:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 140              		.loc 1 355 3 is_stmt 1 view .LVU44
 141 004c 1A68     		ldr	r2, [r3]
 142 004e 22F00202 		bic	r2, r2, #2
 143 0052 1A60     		str	r2, [r3]
 358:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 144              		.loc 1 358 3 view .LVU45
 358:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 145              		.loc 1 358 15 is_stmt 0 view .LVU46
 146 0054 FFF7FEFF 		bl	HAL_GetTick
 147              	.LVL9:
 148 0058 0546     		mov	r5, r0
 149              	.LVL10:
 361:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 150              		.loc 1 361 3 is_stmt 1 view .LVU47
 151              	.L7:
 361:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 152              		.loc 1 361 9 view .LVU48
 361:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 153              		.loc 1 361 15 is_stmt 0 view .LVU49
 154 005a 2368     		ldr	r3, [r4]
 361:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 155              		.loc 1 361 25 view .LVU50
 156 005c 5A68     		ldr	r2, [r3, #4]
 361:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 157              		.loc 1 361 9 view .LVU51
 158 005e 12F0020F 		tst	r2, #2
 159 0062 0DD0     		beq	.L28
 363:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 160              		.loc 1 363 5 is_stmt 1 view .LVU52
 363:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 161              		.loc 1 363 10 is_stmt 0 view .LVU53
 162 0064 FFF7FEFF 		bl	HAL_GetTick
 163              	.LVL11:
 363:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 164              		.loc 1 363 24 view .LVU54
 165 0068 401B     		subs	r0, r0, r5
 363:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 166              		.loc 1 363 8 view .LVU55
 167 006a 0A28     		cmp	r0, #10
 168 006c F5D9     		bls	.L7
 366:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 169              		.loc 1 366 7 is_stmt 1 view .LVU56
 366:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 170              		.loc 1 366 23 is_stmt 0 view .LVU57
 171 006e 636A     		ldr	r3, [r4, #36]
 172 0070 43F40033 		orr	r3, r3, #131072
 173 0074 6362     		str	r3, [r4, #36]
 369:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 174              		.loc 1 369 7 is_stmt 1 view .LVU58
ARM GAS  /tmp/cc0fpaGl.s 			page 14


 369:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 175              		.loc 1 369 19 is_stmt 0 view .LVU59
 176 0076 0523     		movs	r3, #5
 177 0078 84F82030 		strb	r3, [r4, #32]
 371:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 178              		.loc 1 371 7 is_stmt 1 view .LVU60
 371:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 179              		.loc 1 371 14 is_stmt 0 view .LVU61
 180 007c 0120     		movs	r0, #1
 181 007e E1E7     		b	.L3
 182              	.L28:
 376:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 183              		.loc 1 376 3 is_stmt 1 view .LVU62
 376:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 184              		.loc 1 376 17 is_stmt 0 view .LVU63
 185 0080 227E     		ldrb	r2, [r4, #24]	@ zero_extendqisi2
 376:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 186              		.loc 1 376 6 view .LVU64
 187 0082 012A     		cmp	r2, #1
 188 0084 3DD0     		beq	.L29
 382:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 189              		.loc 1 382 5 is_stmt 1 view .LVU65
 190 0086 1A68     		ldr	r2, [r3]
 191 0088 22F08002 		bic	r2, r2, #128
 192 008c 1A60     		str	r2, [r3]
 193              	.L10:
 386:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 194              		.loc 1 386 3 view .LVU66
 386:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 195              		.loc 1 386 17 is_stmt 0 view .LVU67
 196 008e 637E     		ldrb	r3, [r4, #25]	@ zero_extendqisi2
 386:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 197              		.loc 1 386 6 view .LVU68
 198 0090 012B     		cmp	r3, #1
 199 0092 3BD0     		beq	.L30
 392:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 200              		.loc 1 392 5 is_stmt 1 view .LVU69
 201 0094 2268     		ldr	r2, [r4]
 202 0096 1368     		ldr	r3, [r2]
 203 0098 23F04003 		bic	r3, r3, #64
 204 009c 1360     		str	r3, [r2]
 205              	.L12:
 396:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 206              		.loc 1 396 3 view .LVU70
 396:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 207              		.loc 1 396 17 is_stmt 0 view .LVU71
 208 009e A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 396:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 209              		.loc 1 396 6 view .LVU72
 210 00a0 012B     		cmp	r3, #1
 211 00a2 39D0     		beq	.L31
 402:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 212              		.loc 1 402 5 is_stmt 1 view .LVU73
 213 00a4 2268     		ldr	r2, [r4]
 214 00a6 1368     		ldr	r3, [r2]
 215 00a8 23F02003 		bic	r3, r3, #32
 216 00ac 1360     		str	r3, [r2]
ARM GAS  /tmp/cc0fpaGl.s 			page 15


 217              	.L14:
 406:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 218              		.loc 1 406 3 view .LVU74
 406:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 219              		.loc 1 406 17 is_stmt 0 view .LVU75
 220 00ae E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 406:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 221              		.loc 1 406 6 view .LVU76
 222 00b0 012B     		cmp	r3, #1
 223 00b2 37D0     		beq	.L32
 412:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 224              		.loc 1 412 5 is_stmt 1 view .LVU77
 225 00b4 2268     		ldr	r2, [r4]
 226 00b6 1368     		ldr	r3, [r2]
 227 00b8 43F01003 		orr	r3, r3, #16
 228 00bc 1360     		str	r3, [r2]
 229              	.L16:
 416:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 230              		.loc 1 416 3 view .LVU78
 416:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 231              		.loc 1 416 17 is_stmt 0 view .LVU79
 232 00be 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 416:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 233              		.loc 1 416 6 view .LVU80
 234 00c0 012B     		cmp	r3, #1
 235 00c2 35D0     		beq	.L33
 422:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 236              		.loc 1 422 5 is_stmt 1 view .LVU81
 237 00c4 2268     		ldr	r2, [r4]
 238 00c6 1368     		ldr	r3, [r2]
 239 00c8 23F00803 		bic	r3, r3, #8
 240 00cc 1360     		str	r3, [r2]
 241              	.L18:
 426:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 242              		.loc 1 426 3 view .LVU82
 426:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 243              		.loc 1 426 17 is_stmt 0 view .LVU83
 244 00ce 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 426:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 245              		.loc 1 426 6 view .LVU84
 246 00d0 012B     		cmp	r3, #1
 247 00d2 33D0     		beq	.L34
 432:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 248              		.loc 1 432 5 is_stmt 1 view .LVU85
 249 00d4 2268     		ldr	r2, [r4]
 250 00d6 1368     		ldr	r3, [r2]
 251 00d8 23F00403 		bic	r3, r3, #4
 252 00dc 1360     		str	r3, [r2]
 253              	.L20:
 436:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 254              		.loc 1 436 3 view .LVU86
 255 00de A368     		ldr	r3, [r4, #8]
 256 00e0 E268     		ldr	r2, [r4, #12]
 257 00e2 1343     		orrs	r3, r3, r2
 258 00e4 2269     		ldr	r2, [r4, #16]
 259 00e6 1343     		orrs	r3, r3, r2
 260 00e8 6269     		ldr	r2, [r4, #20]
ARM GAS  /tmp/cc0fpaGl.s 			page 16


 261 00ea 1343     		orrs	r3, r3, r2
 262 00ec 6268     		ldr	r2, [r4, #4]
 263 00ee 013A     		subs	r2, r2, #1
 264 00f0 2168     		ldr	r1, [r4]
 265 00f2 1343     		orrs	r3, r3, r2
 266 00f4 CB61     		str	r3, [r1, #28]
 443:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 267              		.loc 1 443 3 view .LVU87
 443:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 268              		.loc 1 443 19 is_stmt 0 view .LVU88
 269 00f6 0020     		movs	r0, #0
 270 00f8 6062     		str	r0, [r4, #36]
 446:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 271              		.loc 1 446 3 is_stmt 1 view .LVU89
 446:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 272              		.loc 1 446 15 is_stmt 0 view .LVU90
 273 00fa 0123     		movs	r3, #1
 274 00fc 84F82030 		strb	r3, [r4, #32]
 449:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 275              		.loc 1 449 3 is_stmt 1 view .LVU91
 449:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 276              		.loc 1 449 10 is_stmt 0 view .LVU92
 277 0100 A0E7     		b	.L3
 278              	.L29:
 378:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 279              		.loc 1 378 5 is_stmt 1 view .LVU93
 280 0102 1A68     		ldr	r2, [r3]
 281 0104 42F08002 		orr	r2, r2, #128
 282 0108 1A60     		str	r2, [r3]
 283 010a C0E7     		b	.L10
 284              	.L30:
 388:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 285              		.loc 1 388 5 view .LVU94
 286 010c 2268     		ldr	r2, [r4]
 287 010e 1368     		ldr	r3, [r2]
 288 0110 43F04003 		orr	r3, r3, #64
 289 0114 1360     		str	r3, [r2]
 290 0116 C2E7     		b	.L12
 291              	.L31:
 398:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 292              		.loc 1 398 5 view .LVU95
 293 0118 2268     		ldr	r2, [r4]
 294 011a 1368     		ldr	r3, [r2]
 295 011c 43F02003 		orr	r3, r3, #32
 296 0120 1360     		str	r3, [r2]
 297 0122 C4E7     		b	.L14
 298              	.L32:
 408:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 299              		.loc 1 408 5 view .LVU96
 300 0124 2268     		ldr	r2, [r4]
 301 0126 1368     		ldr	r3, [r2]
 302 0128 23F01003 		bic	r3, r3, #16
 303 012c 1360     		str	r3, [r2]
 304 012e C6E7     		b	.L16
 305              	.L33:
 418:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 306              		.loc 1 418 5 view .LVU97
ARM GAS  /tmp/cc0fpaGl.s 			page 17


 307 0130 2268     		ldr	r2, [r4]
 308 0132 1368     		ldr	r3, [r2]
 309 0134 43F00803 		orr	r3, r3, #8
 310 0138 1360     		str	r3, [r2]
 311 013a C8E7     		b	.L18
 312              	.L34:
 428:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 313              		.loc 1 428 5 view .LVU98
 314 013c 2268     		ldr	r2, [r4]
 315 013e 1368     		ldr	r3, [r2]
 316 0140 43F00403 		orr	r3, r3, #4
 317 0144 1360     		str	r3, [r2]
 318 0146 CAE7     		b	.L20
 319              	.LVL12:
 320              	.L21:
 321              	.LCFI1:
 322              		.cfi_def_cfa_offset 0
 323              		.cfi_restore 3
 324              		.cfi_restore 4
 325              		.cfi_restore 5
 326              		.cfi_restore 14
 281:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 327              		.loc 1 281 12 is_stmt 0 view .LVU99
 328 0148 0120     		movs	r0, #1
 329              	.LVL13:
 450:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 330              		.loc 1 450 1 view .LVU100
 331 014a 7047     		bx	lr
 332              		.cfi_endproc
 333              	.LFE65:
 335              		.section	.text.HAL_CAN_MspDeInit,"ax",%progbits
 336              		.align	1
 337              		.weak	HAL_CAN_MspDeInit
 338              		.syntax unified
 339              		.thumb
 340              		.thumb_func
 342              	HAL_CAN_MspDeInit:
 343              	.LVL14:
 344              	.LFB68:
 515:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 516:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 517:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 518:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 519:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 520:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
 521:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 522:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 523:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 345              		.loc 1 523 1 is_stmt 1 view -0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 0
 348              		@ frame_needed = 0, uses_anonymous_args = 0
 349              		@ link register save eliminated.
 524:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 525:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 350              		.loc 1 525 3 view .LVU102
 526:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/cc0fpaGl.s 			page 18


 527:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 528:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 529:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
 530:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 351              		.loc 1 530 1 is_stmt 0 view .LVU103
 352 0000 7047     		bx	lr
 353              		.cfi_endproc
 354              	.LFE68:
 356              		.section	.text.HAL_CAN_ConfigFilter,"ax",%progbits
 357              		.align	1
 358              		.global	HAL_CAN_ConfigFilter
 359              		.syntax unified
 360              		.thumb
 361              		.thumb_func
 363              	HAL_CAN_ConfigFilter:
 364              	.LVL15:
 365              	.LFB69:
 531:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 532:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 533:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 534:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Register a CAN CallBack.
 535:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         To be used instead of the weak predefined callback
 536:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 537:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for CAN module
 538:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  CallbackID ID of the callback to be registered
 539:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be one of the following values:
 540:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID Tx Mailbox 0 Complete callback ID
 541:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID Tx Mailbox 1 Complete callback ID
 542:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID Tx Mailbox 2 Complete callback ID
 543:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CB_ID Tx Mailbox 0 Abort callback ID
 544:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CB_ID Tx Mailbox 1 Abort callback ID
 545:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CB_ID Tx Mailbox 2 Abort callback ID
 546:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID Rx Fifo 0 message pending callback ID
 547:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CB_ID Rx Fifo 0 full callback ID
 548:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID Rx Fifo 1 message pending callback ID
 549:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CB_ID Rx Fifo 1 full callback ID
 550:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CB_ID Sleep callback ID
 551:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID Wake Up from Rx message callback ID
 552:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CB_ID Error callback ID
 553:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 554:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 555:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pCallback pointer to the Callback function
 556:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 557:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 558:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Callb
 559:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 560:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 561:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 562:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (pCallback == NULL)
 563:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 564:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update the error code */
 565:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 566:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 567:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 568:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 569:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 570:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
ARM GAS  /tmp/cc0fpaGl.s 			page 19


 571:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 572:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     switch (CallbackID)
 573:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 574:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 575:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = pCallback;
 576:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 577:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 578:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 579:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = pCallback;
 580:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 581:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 582:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 583:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = pCallback;
 584:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 585:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 586:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 587:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = pCallback;
 588:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 589:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 590:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 591:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = pCallback;
 592:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 593:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 594:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 595:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = pCallback;
 596:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 597:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 598:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 599:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = pCallback;
 600:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 601:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 602:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
 603:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo0FullCallback = pCallback;
 604:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 605:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 606:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 607:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = pCallback;
 608:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 609:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 610:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 611:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo1FullCallback = pCallback;
 612:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 613:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 614:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 615:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->SleepCallback = pCallback;
 616:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 617:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 618:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 619:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = pCallback;
 620:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 621:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 622:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
 623:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCallback = pCallback;
 624:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 625:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 626:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 627:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
ARM GAS  /tmp/cc0fpaGl.s 			page 20


 628:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 629:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 630:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 631:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 632:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 633:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 634:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       default :
 635:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update the error code */
 636:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 637:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 638:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Return error status */
 639:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         status =  HAL_ERROR;
 640:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 641:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 642:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 643:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 644:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 645:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     switch (CallbackID)
 646:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 647:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 648:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
 649:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 650:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 651:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 652:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 653:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 654:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 655:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       default :
 656:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update the error code */
 657:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 658:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 659:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Return error status */
 660:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         status =  HAL_ERROR;
 661:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 662:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 663:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 664:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 665:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 666:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update the error code */
 667:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 668:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 669:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return error status */
 670:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     status =  HAL_ERROR;
 671:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 672:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 673:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
 674:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 675:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 676:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 677:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Unregister a CAN CallBack.
 678:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         CAN callabck is redirected to the weak predefined callback
 679:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 680:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for CAN module
 681:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  CallbackID ID of the callback to be unregistered
 682:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be one of the following values:
 683:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID Tx Mailbox 0 Complete callback ID
 684:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID Tx Mailbox 1 Complete callback ID
ARM GAS  /tmp/cc0fpaGl.s 			page 21


 685:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID Tx Mailbox 2 Complete callback ID
 686:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CB_ID Tx Mailbox 0 Abort callback ID
 687:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CB_ID Tx Mailbox 1 Abort callback ID
 688:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CB_ID Tx Mailbox 2 Abort callback ID
 689:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID Rx Fifo 0 message pending callback ID
 690:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CB_ID Rx Fifo 0 full callback ID
 691:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID Rx Fifo 1 message pending callback ID
 692:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CB_ID Rx Fifo 1 full callback ID
 693:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CB_ID Sleep callback ID
 694:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID Wake Up from Rx message callback ID
 695:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CB_ID Error callback ID
 696:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 697:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 698:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 699:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 700:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_UnRegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Cal
 701:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 702:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 703:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 704:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 705:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 706:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     switch (CallbackID)
 707:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 708:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 709:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = HAL_CAN_TxMailbox0CompleteCallback;
 710:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 711:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 712:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 713:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = HAL_CAN_TxMailbox1CompleteCallback;
 714:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 715:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 716:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 717:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = HAL_CAN_TxMailbox2CompleteCallback;
 718:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 719:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 720:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 721:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = HAL_CAN_TxMailbox0AbortCallback;
 722:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 723:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 724:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 725:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = HAL_CAN_TxMailbox1AbortCallback;
 726:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 727:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 728:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 729:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = HAL_CAN_TxMailbox2AbortCallback;
 730:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 731:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 732:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 733:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = HAL_CAN_RxFifo0MsgPendingCallback;
 734:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 735:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 736:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
 737:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo0FullCallback = HAL_CAN_RxFifo0FullCallback;
 738:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 739:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 740:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 741:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = HAL_CAN_RxFifo1MsgPendingCallback;
ARM GAS  /tmp/cc0fpaGl.s 			page 22


 742:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 743:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 744:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 745:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo1FullCallback = HAL_CAN_RxFifo1FullCallback;
 746:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 747:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 748:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 749:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->SleepCallback = HAL_CAN_SleepCallback;
 750:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 751:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 752:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 753:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = HAL_CAN_WakeUpFromRxMsgCallback;
 754:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 755:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 756:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
 757:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCallback = HAL_CAN_ErrorCallback;
 758:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 759:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 760:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 761:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 762:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 763:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 764:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 765:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 766:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 767:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 768:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       default :
 769:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update the error code */
 770:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 771:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 772:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Return error status */
 773:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         status =  HAL_ERROR;
 774:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 775:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 776:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 777:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 778:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 779:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     switch (CallbackID)
 780:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 781:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 782:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 783:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 784:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 785:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 786:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 787:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 788:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 789:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       default :
 790:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update the error code */
 791:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 792:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 793:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Return error status */
 794:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         status =  HAL_ERROR;
 795:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 796:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 797:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 798:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
ARM GAS  /tmp/cc0fpaGl.s 			page 23


 799:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 800:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update the error code */
 801:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 802:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 803:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return error status */
 804:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     status =  HAL_ERROR;
 805:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 806:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 807:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
 808:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 809:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 810:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 811:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 812:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
 813:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 814:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 815:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 816:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief    Configuration functions.
 817:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
 818:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
 819:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 820:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****               ##### Configuration functions #####
 821:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 822:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 823:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 824:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 825:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
 826:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 827:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 828:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 829:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 830:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 831:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 832:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 833:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 834:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 835:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         contains the filter configuration information.
 836:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
 837:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 838:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
 839:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 366              		.loc 1 839 1 is_stmt 1 view -0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 840:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filternbrbitpos;
 370              		.loc 1 840 3 view .LVU105
 841:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
 371              		.loc 1 841 3 view .LVU106
 372              		.loc 1 841 16 is_stmt 0 view .LVU107
 373 0000 0268     		ldr	r2, [r0]
 374              	.LVL16:
 842:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 375              		.loc 1 842 3 is_stmt 1 view .LVU108
 376              		.loc 1 842 24 is_stmt 0 view .LVU109
 377 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 378              	.LVL17:
ARM GAS  /tmp/cc0fpaGl.s 			page 24


 843:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 844:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 379              		.loc 1 844 3 is_stmt 1 view .LVU110
 380              		.loc 1 844 38 is_stmt 0 view .LVU111
 381 0006 013B     		subs	r3, r3, #1
 382              	.LVL18:
 383              		.loc 1 844 38 view .LVU112
 384 0008 DBB2     		uxtb	r3, r3
 385              		.loc 1 844 6 view .LVU113
 386 000a 012B     		cmp	r3, #1
 387 000c 05D9     		bls	.L50
 845:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 846:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 847:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 848:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 849:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 850:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 851:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 852:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 853:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 854:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 855:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 856:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 857:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if   defined(CAN2)
 858:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 859:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Select master instance to access the filter banks */
 860:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     can_ip = CAN1;
 861:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 862:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 863:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 864:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 865:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
 866:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* CAN1 is single instance with 14 dedicated filters banks */
 867:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 868:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 869:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 870:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif
 871:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 872:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Initialisation mode for the filter */
 873:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 874:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 875:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if   defined(CAN2)
 876:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Select the start filter number of CAN2 slave instance */
 877:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 878:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 879:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 880:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif
 881:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Convert filter number into bit position */
 882:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 883:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 884:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter Deactivation */
 885:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 886:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 887:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter Scale */
 888:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 889:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 890:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 16-bit scale for the filter */
ARM GAS  /tmp/cc0fpaGl.s 			page 25


 891:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 892:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 893:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 894:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 895:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 896:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 897:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 898:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 899:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 900:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 901:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 902:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 903:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 904:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 905:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 906:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 907:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 908:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 32-bit scale for the filter */
 909:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 910:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 911:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
 912:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 913:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 914:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 915:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 916:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
 917:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 918:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 919:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 920:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 921:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 922:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter Mode */
 923:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 924:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 925:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 926:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 927:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 928:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 929:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 930:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Identifier list mode for the filter*/
 931:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 932:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 933:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 934:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter FIFO assignment */
 935:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 936:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 937:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
 938:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 939:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 940:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
 941:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 942:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 943:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 944:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 945:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 946:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter activation */
 947:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
ARM GAS  /tmp/cc0fpaGl.s 			page 26


 948:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 949:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 950:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 951:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 952:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 953:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 954:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 955:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
 956:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 957:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 958:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 959:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 960:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 961:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 388              		.loc 1 961 5 is_stmt 1 view .LVU114
 389              		.loc 1 961 21 is_stmt 0 view .LVU115
 390 000e 436A     		ldr	r3, [r0, #36]
 391 0010 43F48023 		orr	r3, r3, #262144
 392 0014 4362     		str	r3, [r0, #36]
 962:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 963:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 393              		.loc 1 963 5 is_stmt 1 view .LVU116
 394              		.loc 1 963 12 is_stmt 0 view .LVU117
 395 0016 0120     		movs	r0, #1
 396              	.LVL19:
 964:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 965:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 397              		.loc 1 965 1 view .LVU118
 398 0018 7047     		bx	lr
 399              	.LVL20:
 400              	.L50:
 839:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filternbrbitpos;
 401              		.loc 1 839 1 view .LVU119
 402 001a 10B5     		push	{r4, lr}
 403              	.LCFI2:
 404              		.cfi_def_cfa_offset 8
 405              		.cfi_offset 4, -8
 406              		.cfi_offset 14, -4
 848:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 407              		.loc 1 848 5 is_stmt 1 view .LVU120
 849:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 408              		.loc 1 849 5 view .LVU121
 850:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 409              		.loc 1 850 5 view .LVU122
 851:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 410              		.loc 1 851 5 view .LVU123
 852:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 411              		.loc 1 852 5 view .LVU124
 853:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 412              		.loc 1 853 5 view .LVU125
 854:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 413              		.loc 1 854 5 view .LVU126
 855:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 414              		.loc 1 855 5 view .LVU127
 869:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif
 415              		.loc 1 869 5 view .LVU128
 873:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/cc0fpaGl.s 			page 27


 416              		.loc 1 873 5 view .LVU129
 417 001c D2F80032 		ldr	r3, [r2, #512]
 418 0020 43F00103 		orr	r3, r3, #1
 419 0024 C2F80032 		str	r3, [r2, #512]
 882:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 420              		.loc 1 882 5 view .LVU130
 882:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 421              		.loc 1 882 52 is_stmt 0 view .LVU131
 422 0028 4B69     		ldr	r3, [r1, #20]
 882:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 423              		.loc 1 882 65 view .LVU132
 424 002a 03F01F03 		and	r3, r3, #31
 882:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 425              		.loc 1 882 21 view .LVU133
 426 002e 0120     		movs	r0, #1
 427              	.LVL21:
 882:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 428              		.loc 1 882 21 view .LVU134
 429 0030 00FA03F3 		lsl	r3, r0, r3
 430              	.LVL22:
 885:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 431              		.loc 1 885 5 is_stmt 1 view .LVU135
 432 0034 D2F81C02 		ldr	r0, [r2, #540]
 433 0038 6FEA030C 		mvn	ip, r3
 434 003c 20EA0300 		bic	r0, r0, r3
 435 0040 C2F81C02 		str	r0, [r2, #540]
 888:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 436              		.loc 1 888 5 view .LVU136
 888:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 437              		.loc 1 888 22 is_stmt 0 view .LVU137
 438 0044 C869     		ldr	r0, [r1, #28]
 888:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 439              		.loc 1 888 8 view .LVU138
 440 0046 C0B9     		cbnz	r0, .L38
 891:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 441              		.loc 1 891 7 is_stmt 1 view .LVU139
 442 0048 D2F80C02 		ldr	r0, [r2, #524]
 443 004c 0CEA0000 		and	r0, ip, r0
 444 0050 C2F80C02 		str	r0, [r2, #524]
 895:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 445              		.loc 1 895 7 view .LVU140
 897:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 446              		.loc 1 897 22 is_stmt 0 view .LVU141
 447 0054 8C88     		ldrh	r4, [r1, #4]
 895:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 448              		.loc 1 895 44 view .LVU142
 449 0056 4869     		ldr	r0, [r1, #20]
 896:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 450              		.loc 1 896 75 view .LVU143
 451 0058 D1F80CE0 		ldr	lr, [r1, #12]
 452 005c 44EA0E44 		orr	r4, r4, lr, lsl #16
 895:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 453              		.loc 1 895 62 view .LVU144
 454 0060 4830     		adds	r0, r0, #72
 455 0062 42F83040 		str	r4, [r2, r0, lsl #3]
 901:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 456              		.loc 1 901 7 is_stmt 1 view .LVU145
ARM GAS  /tmp/cc0fpaGl.s 			page 28


 903:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 457              		.loc 1 903 22 is_stmt 0 view .LVU146
 458 0066 0C88     		ldrh	r4, [r1]
 901:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 459              		.loc 1 901 44 view .LVU147
 460 0068 4869     		ldr	r0, [r1, #20]
 902:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 461              		.loc 1 902 76 view .LVU148
 462 006a D1F808E0 		ldr	lr, [r1, #8]
 463 006e 44EA0E44 		orr	r4, r4, lr, lsl #16
 901:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 464              		.loc 1 901 62 view .LVU149
 465 0072 4830     		adds	r0, r0, #72
 466 0074 02EBC000 		add	r0, r2, r0, lsl #3
 467 0078 4460     		str	r4, [r0, #4]
 468              	.L38:
 906:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 469              		.loc 1 906 5 is_stmt 1 view .LVU150
 906:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 470              		.loc 1 906 22 is_stmt 0 view .LVU151
 471 007a C869     		ldr	r0, [r1, #28]
 906:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 472              		.loc 1 906 8 view .LVU152
 473 007c 0128     		cmp	r0, #1
 474 007e 1AD0     		beq	.L51
 475              	.L39:
 923:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 476              		.loc 1 923 5 is_stmt 1 view .LVU153
 923:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 477              		.loc 1 923 22 is_stmt 0 view .LVU154
 478 0080 8869     		ldr	r0, [r1, #24]
 923:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 479              		.loc 1 923 8 view .LVU155
 480 0082 88BB     		cbnz	r0, .L40
 926:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 481              		.loc 1 926 7 is_stmt 1 view .LVU156
 482 0084 D2F80402 		ldr	r0, [r2, #516]
 483 0088 0CEA0000 		and	r0, ip, r0
 484 008c C2F80402 		str	r0, [r2, #516]
 485              	.L41:
 935:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 486              		.loc 1 935 5 view .LVU157
 935:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 487              		.loc 1 935 22 is_stmt 0 view .LVU158
 488 0090 0869     		ldr	r0, [r1, #16]
 935:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 489              		.loc 1 935 8 view .LVU159
 490 0092 78BB     		cbnz	r0, .L42
 938:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 491              		.loc 1 938 7 is_stmt 1 view .LVU160
 492 0094 D2F81402 		ldr	r0, [r2, #532]
 493 0098 0CEA0000 		and	r0, ip, r0
 494 009c C2F81402 		str	r0, [r2, #532]
 495              	.L43:
 947:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 496              		.loc 1 947 5 view .LVU161
 947:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
ARM GAS  /tmp/cc0fpaGl.s 			page 29


 497              		.loc 1 947 22 is_stmt 0 view .LVU162
 498 00a0 096A     		ldr	r1, [r1, #32]
 499              	.LVL23:
 947:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 500              		.loc 1 947 8 view .LVU163
 501 00a2 0129     		cmp	r1, #1
 502 00a4 2CD0     		beq	.L52
 503              	.LVL24:
 504              	.L44:
 953:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 505              		.loc 1 953 5 is_stmt 1 view .LVU164
 506 00a6 D2F80032 		ldr	r3, [r2, #512]
 507 00aa 23F00103 		bic	r3, r3, #1
 508 00ae C2F80032 		str	r3, [r2, #512]
 956:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 509              		.loc 1 956 5 view .LVU165
 956:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 510              		.loc 1 956 12 is_stmt 0 view .LVU166
 511 00b2 0020     		movs	r0, #0
 512              		.loc 1 965 1 view .LVU167
 513 00b4 10BD     		pop	{r4, pc}
 514              	.LVL25:
 515              	.L51:
 909:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 516              		.loc 1 909 7 is_stmt 1 view .LVU168
 517 00b6 D2F80C02 		ldr	r0, [r2, #524]
 518 00ba 1843     		orrs	r0, r0, r3
 519 00bc C2F80C02 		str	r0, [r2, #524]
 912:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 520              		.loc 1 912 7 view .LVU169
 914:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 521              		.loc 1 914 22 is_stmt 0 view .LVU170
 522 00c0 8C88     		ldrh	r4, [r1, #4]
 912:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 523              		.loc 1 912 44 view .LVU171
 524 00c2 4869     		ldr	r0, [r1, #20]
 913:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 525              		.loc 1 913 72 view .LVU172
 526 00c4 D1F800E0 		ldr	lr, [r1]
 527 00c8 44EA0E44 		orr	r4, r4, lr, lsl #16
 912:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 528              		.loc 1 912 62 view .LVU173
 529 00cc 4830     		adds	r0, r0, #72
 530 00ce 42F83040 		str	r4, [r2, r0, lsl #3]
 917:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 531              		.loc 1 917 7 is_stmt 1 view .LVU174
 919:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 532              		.loc 1 919 22 is_stmt 0 view .LVU175
 533 00d2 8C89     		ldrh	r4, [r1, #12]
 917:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 534              		.loc 1 917 44 view .LVU176
 535 00d4 4869     		ldr	r0, [r1, #20]
 918:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 536              		.loc 1 918 76 view .LVU177
 537 00d6 D1F808E0 		ldr	lr, [r1, #8]
 538 00da 44EA0E44 		orr	r4, r4, lr, lsl #16
 917:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
ARM GAS  /tmp/cc0fpaGl.s 			page 30


 539              		.loc 1 917 62 view .LVU178
 540 00de 4830     		adds	r0, r0, #72
 541 00e0 02EBC000 		add	r0, r2, r0, lsl #3
 542 00e4 4460     		str	r4, [r0, #4]
 543 00e6 CBE7     		b	.L39
 544              	.L40:
 931:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 545              		.loc 1 931 7 is_stmt 1 view .LVU179
 546 00e8 D2F80402 		ldr	r0, [r2, #516]
 547 00ec 1843     		orrs	r0, r0, r3
 548 00ee C2F80402 		str	r0, [r2, #516]
 549 00f2 CDE7     		b	.L41
 550              	.L42:
 943:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 551              		.loc 1 943 7 view .LVU180
 552 00f4 D2F81402 		ldr	r0, [r2, #532]
 553 00f8 1843     		orrs	r0, r0, r3
 554 00fa C2F81402 		str	r0, [r2, #532]
 555 00fe CFE7     		b	.L43
 556              	.LVL26:
 557              	.L52:
 949:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 558              		.loc 1 949 7 view .LVU181
 559 0100 D2F81C12 		ldr	r1, [r2, #540]
 560 0104 0B43     		orrs	r3, r3, r1
 561              	.LVL27:
 949:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 562              		.loc 1 949 7 is_stmt 0 view .LVU182
 563 0106 C2F81C32 		str	r3, [r2, #540]
 564 010a CCE7     		b	.L44
 565              		.cfi_endproc
 566              	.LFE69:
 568              		.section	.text.HAL_CAN_Start,"ax",%progbits
 569              		.align	1
 570              		.global	HAL_CAN_Start
 571              		.syntax unified
 572              		.thumb
 573              		.thumb_func
 575              	HAL_CAN_Start:
 576              	.LVL28:
 577              	.LFB70:
 966:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 967:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 968:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
 969:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 970:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 971:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
 972:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief    Control functions
 973:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
 974:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
 975:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 976:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                       ##### Control functions #####
 977:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 978:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 979:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
 980:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
 981:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
ARM GAS  /tmp/cc0fpaGl.s 			page 31


 982:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
 983:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
 984:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
 985:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                              and activate the corresponding
 986:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                              transmission request
 987:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
 988:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
 989:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
 990:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                              pending on the selected Tx mailbox
 991:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
 992:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
 993:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 994:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
 995:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 996:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 997:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 998:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 999:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Start the CAN module.
1000:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1001:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1002:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1003:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1004:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
1005:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 578              		.loc 1 1005 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 582              		.loc 1 1005 1 is_stmt 0 view .LVU184
 583 0000 70B5     		push	{r4, r5, r6, lr}
 584              	.LCFI3:
 585              		.cfi_def_cfa_offset 16
 586              		.cfi_offset 4, -16
 587              		.cfi_offset 5, -12
 588              		.cfi_offset 6, -8
 589              		.cfi_offset 14, -4
 590 0002 0446     		mov	r4, r0
1006:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
 591              		.loc 1 1006 3 is_stmt 1 view .LVU185
1007:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1008:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 592              		.loc 1 1008 3 view .LVU186
 593              		.loc 1 1008 11 is_stmt 0 view .LVU187
 594 0004 90F82050 		ldrb	r5, [r0, #32]	@ zero_extendqisi2
 595 0008 EDB2     		uxtb	r5, r5
 596              		.loc 1 1008 6 view .LVU188
 597 000a 012D     		cmp	r5, #1
 598 000c 06D0     		beq	.L59
1009:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1010:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Change CAN peripheral state */
1011:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
1012:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1013:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Request leave initialisation */
1014:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
1015:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1016:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get tick */
1017:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     tickstart = HAL_GetTick();
ARM GAS  /tmp/cc0fpaGl.s 			page 32


1018:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1019:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wait the acknowledge */
1020:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
1021:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1022:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check for the Timeout */
1023:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
1024:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1025:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1026:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1027:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1028:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Change CAN state */
1029:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
1030:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1031:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1032:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1033:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1034:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1035:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Reset the CAN ErrorCode */
1036:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
1037:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1038:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1039:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1040:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1041:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1042:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1043:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1044:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 599              		.loc 1 1044 5 is_stmt 1 view .LVU189
 600              		.loc 1 1044 21 is_stmt 0 view .LVU190
 601 000e 436A     		ldr	r3, [r0, #36]
 602 0010 43F40023 		orr	r3, r3, #524288
 603 0014 4362     		str	r3, [r0, #36]
1045:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1046:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 604              		.loc 1 1046 5 is_stmt 1 view .LVU191
 605              		.loc 1 1046 12 is_stmt 0 view .LVU192
 606 0016 0125     		movs	r5, #1
 607              	.LVL29:
 608              	.L56:
1047:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1048:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 609              		.loc 1 1048 1 view .LVU193
 610 0018 2846     		mov	r0, r5
 611 001a 70BD     		pop	{r4, r5, r6, pc}
 612              	.LVL30:
 613              	.L59:
1011:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 614              		.loc 1 1011 5 is_stmt 1 view .LVU194
1011:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 615              		.loc 1 1011 17 is_stmt 0 view .LVU195
 616 001c 0223     		movs	r3, #2
 617 001e 80F82030 		strb	r3, [r0, #32]
1014:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 618              		.loc 1 1014 5 is_stmt 1 view .LVU196
 619 0022 0268     		ldr	r2, [r0]
 620 0024 1368     		ldr	r3, [r2]
 621 0026 23F00103 		bic	r3, r3, #1
ARM GAS  /tmp/cc0fpaGl.s 			page 33


 622 002a 1360     		str	r3, [r2]
1017:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 623              		.loc 1 1017 5 view .LVU197
1017:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 624              		.loc 1 1017 17 is_stmt 0 view .LVU198
 625 002c FFF7FEFF 		bl	HAL_GetTick
 626              	.LVL31:
1017:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 627              		.loc 1 1017 17 view .LVU199
 628 0030 0646     		mov	r6, r0
 629              	.LVL32:
1020:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 630              		.loc 1 1020 5 is_stmt 1 view .LVU200
 631              	.L55:
1020:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 632              		.loc 1 1020 11 view .LVU201
1020:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 633              		.loc 1 1020 17 is_stmt 0 view .LVU202
 634 0032 2368     		ldr	r3, [r4]
1020:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 635              		.loc 1 1020 27 view .LVU203
 636 0034 5B68     		ldr	r3, [r3, #4]
1020:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 637              		.loc 1 1020 11 view .LVU204
 638 0036 13F0010F 		tst	r3, #1
 639 003a 0CD0     		beq	.L60
1023:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 640              		.loc 1 1023 7 is_stmt 1 view .LVU205
1023:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 641              		.loc 1 1023 12 is_stmt 0 view .LVU206
 642 003c FFF7FEFF 		bl	HAL_GetTick
 643              	.LVL33:
1023:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 644              		.loc 1 1023 26 view .LVU207
 645 0040 831B     		subs	r3, r0, r6
1023:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 646              		.loc 1 1023 10 view .LVU208
 647 0042 0A2B     		cmp	r3, #10
 648 0044 F5D9     		bls	.L55
1026:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 649              		.loc 1 1026 9 is_stmt 1 view .LVU209
1026:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 650              		.loc 1 1026 25 is_stmt 0 view .LVU210
 651 0046 636A     		ldr	r3, [r4, #36]
 652 0048 43F40033 		orr	r3, r3, #131072
 653 004c 6362     		str	r3, [r4, #36]
1029:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 654              		.loc 1 1029 9 is_stmt 1 view .LVU211
1029:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 655              		.loc 1 1029 21 is_stmt 0 view .LVU212
 656 004e 0523     		movs	r3, #5
 657 0050 84F82030 		strb	r3, [r4, #32]
1031:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 658              		.loc 1 1031 9 is_stmt 1 view .LVU213
1031:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 659              		.loc 1 1031 16 is_stmt 0 view .LVU214
 660 0054 E0E7     		b	.L56
ARM GAS  /tmp/cc0fpaGl.s 			page 34


 661              	.L60:
1036:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 662              		.loc 1 1036 5 is_stmt 1 view .LVU215
1036:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 663              		.loc 1 1036 21 is_stmt 0 view .LVU216
 664 0056 0025     		movs	r5, #0
 665 0058 6562     		str	r5, [r4, #36]
1039:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 666              		.loc 1 1039 5 is_stmt 1 view .LVU217
1039:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 667              		.loc 1 1039 12 is_stmt 0 view .LVU218
 668 005a DDE7     		b	.L56
 669              		.cfi_endproc
 670              	.LFE70:
 672              		.section	.text.HAL_CAN_Stop,"ax",%progbits
 673              		.align	1
 674              		.global	HAL_CAN_Stop
 675              		.syntax unified
 676              		.thumb
 677              		.thumb_func
 679              	HAL_CAN_Stop:
 680              	.LVL34:
 681              	.LFB71:
1049:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1050:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1051:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
1052:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1053:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1054:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1055:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1056:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
1057:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 682              		.loc 1 1057 1 is_stmt 1 view -0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 0
 685              		@ frame_needed = 0, uses_anonymous_args = 0
 686              		.loc 1 1057 1 is_stmt 0 view .LVU220
 687 0000 38B5     		push	{r3, r4, r5, lr}
 688              	.LCFI4:
 689              		.cfi_def_cfa_offset 16
 690              		.cfi_offset 3, -16
 691              		.cfi_offset 4, -12
 692              		.cfi_offset 5, -8
 693              		.cfi_offset 14, -4
 694 0002 0446     		mov	r4, r0
1058:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
 695              		.loc 1 1058 3 is_stmt 1 view .LVU221
1059:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1060:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
 696              		.loc 1 1060 3 view .LVU222
 697              		.loc 1 1060 11 is_stmt 0 view .LVU223
 698 0004 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 699 0008 DBB2     		uxtb	r3, r3
 700              		.loc 1 1060 6 view .LVU224
 701 000a 022B     		cmp	r3, #2
 702 000c 05D0     		beq	.L67
1061:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
ARM GAS  /tmp/cc0fpaGl.s 			page 35


1062:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Request initialisation */
1063:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
1064:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1065:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get tick */
1066:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     tickstart = HAL_GetTick();
1067:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1068:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wait the acknowledge */
1069:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
1070:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1071:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check for the Timeout */
1072:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
1073:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1074:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1075:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1076:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1077:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Change CAN state */
1078:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
1079:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1080:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1081:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1082:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1083:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1084:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Exit from sleep mode */
1085:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
1086:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1087:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Change CAN peripheral state */
1088:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
1089:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1090:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1091:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1092:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1093:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1094:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1095:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1096:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 703              		.loc 1 1096 5 is_stmt 1 view .LVU225
 704              		.loc 1 1096 21 is_stmt 0 view .LVU226
 705 000e 436A     		ldr	r3, [r0, #36]
 706 0010 43F48013 		orr	r3, r3, #1048576
 707 0014 4362     		str	r3, [r0, #36]
1097:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1098:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 708              		.loc 1 1098 5 is_stmt 1 view .LVU227
 709              		.loc 1 1098 12 is_stmt 0 view .LVU228
 710 0016 0120     		movs	r0, #1
 711              	.LVL35:
 712              	.L64:
1099:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1100:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 713              		.loc 1 1100 1 view .LVU229
 714 0018 38BD     		pop	{r3, r4, r5, pc}
 715              	.LVL36:
 716              	.L67:
1063:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 717              		.loc 1 1063 5 is_stmt 1 view .LVU230
 718 001a 0268     		ldr	r2, [r0]
 719 001c 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cc0fpaGl.s 			page 36


 720 001e 43F00103 		orr	r3, r3, #1
 721 0022 1360     		str	r3, [r2]
1066:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 722              		.loc 1 1066 5 view .LVU231
1066:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 723              		.loc 1 1066 17 is_stmt 0 view .LVU232
 724 0024 FFF7FEFF 		bl	HAL_GetTick
 725              	.LVL37:
1066:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 726              		.loc 1 1066 17 view .LVU233
 727 0028 0546     		mov	r5, r0
 728              	.LVL38:
1069:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 729              		.loc 1 1069 5 is_stmt 1 view .LVU234
 730              	.L63:
1069:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 731              		.loc 1 1069 11 view .LVU235
1069:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 732              		.loc 1 1069 17 is_stmt 0 view .LVU236
 733 002a 2368     		ldr	r3, [r4]
1069:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 734              		.loc 1 1069 27 view .LVU237
 735 002c 5A68     		ldr	r2, [r3, #4]
1069:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 736              		.loc 1 1069 11 view .LVU238
 737 002e 12F0010F 		tst	r2, #1
 738 0032 0DD1     		bne	.L68
1072:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 739              		.loc 1 1072 7 is_stmt 1 view .LVU239
1072:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 740              		.loc 1 1072 12 is_stmt 0 view .LVU240
 741 0034 FFF7FEFF 		bl	HAL_GetTick
 742              	.LVL39:
1072:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 743              		.loc 1 1072 26 view .LVU241
 744 0038 431B     		subs	r3, r0, r5
1072:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 745              		.loc 1 1072 10 view .LVU242
 746 003a 0A2B     		cmp	r3, #10
 747 003c F5D9     		bls	.L63
1075:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 748              		.loc 1 1075 9 is_stmt 1 view .LVU243
1075:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 749              		.loc 1 1075 25 is_stmt 0 view .LVU244
 750 003e 636A     		ldr	r3, [r4, #36]
 751 0040 43F40033 		orr	r3, r3, #131072
 752 0044 6362     		str	r3, [r4, #36]
1078:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 753              		.loc 1 1078 9 is_stmt 1 view .LVU245
1078:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 754              		.loc 1 1078 21 is_stmt 0 view .LVU246
 755 0046 0523     		movs	r3, #5
 756 0048 84F82030 		strb	r3, [r4, #32]
1080:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 757              		.loc 1 1080 9 is_stmt 1 view .LVU247
1080:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 758              		.loc 1 1080 16 is_stmt 0 view .LVU248
ARM GAS  /tmp/cc0fpaGl.s 			page 37


 759 004c 0120     		movs	r0, #1
 760 004e E3E7     		b	.L64
 761              	.L68:
1085:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 762              		.loc 1 1085 5 is_stmt 1 view .LVU249
 763 0050 1A68     		ldr	r2, [r3]
 764 0052 22F00202 		bic	r2, r2, #2
 765 0056 1A60     		str	r2, [r3]
1088:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 766              		.loc 1 1088 5 view .LVU250
1088:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 767              		.loc 1 1088 17 is_stmt 0 view .LVU251
 768 0058 0123     		movs	r3, #1
 769 005a 84F82030 		strb	r3, [r4, #32]
1091:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 770              		.loc 1 1091 5 is_stmt 1 view .LVU252
1091:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 771              		.loc 1 1091 12 is_stmt 0 view .LVU253
 772 005e 0020     		movs	r0, #0
 773 0060 DAE7     		b	.L64
 774              		.cfi_endproc
 775              	.LFE71:
 777              		.section	.text.HAL_CAN_DeInit,"ax",%progbits
 778              		.align	1
 779              		.global	HAL_CAN_DeInit
 780              		.syntax unified
 781              		.thumb
 782              		.thumb_func
 784              	HAL_CAN_DeInit:
 785              	.LVL40:
 786              	.LFB66:
 460:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 787              		.loc 1 460 1 is_stmt 1 view -0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 0
 790              		@ frame_needed = 0, uses_anonymous_args = 0
 462:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 791              		.loc 1 462 3 view .LVU255
 462:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 792              		.loc 1 462 6 is_stmt 0 view .LVU256
 793 0000 80B1     		cbz	r0, .L71
 460:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 794              		.loc 1 460 1 view .LVU257
 795 0002 10B5     		push	{r4, lr}
 796              	.LCFI5:
 797              		.cfi_def_cfa_offset 8
 798              		.cfi_offset 4, -8
 799              		.cfi_offset 14, -4
 800 0004 0446     		mov	r4, r0
 468:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 801              		.loc 1 468 3 is_stmt 1 view .LVU258
 471:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 802              		.loc 1 471 3 view .LVU259
 471:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 803              		.loc 1 471 9 is_stmt 0 view .LVU260
 804 0006 FFF7FEFF 		bl	HAL_CAN_Stop
 805              	.LVL41:
ARM GAS  /tmp/cc0fpaGl.s 			page 38


 484:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 806              		.loc 1 484 3 is_stmt 1 view .LVU261
 807 000a 2046     		mov	r0, r4
 808 000c FFF7FEFF 		bl	HAL_CAN_MspDeInit
 809              	.LVL42:
 488:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 810              		.loc 1 488 3 view .LVU262
 811 0010 2268     		ldr	r2, [r4]
 812 0012 1368     		ldr	r3, [r2]
 813 0014 43F40043 		orr	r3, r3, #32768
 814 0018 1360     		str	r3, [r2]
 491:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 815              		.loc 1 491 3 view .LVU263
 491:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 816              		.loc 1 491 19 is_stmt 0 view .LVU264
 817 001a 0020     		movs	r0, #0
 818 001c 6062     		str	r0, [r4, #36]
 494:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 819              		.loc 1 494 3 is_stmt 1 view .LVU265
 494:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 820              		.loc 1 494 15 is_stmt 0 view .LVU266
 821 001e 84F82000 		strb	r0, [r4, #32]
 497:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 822              		.loc 1 497 3 is_stmt 1 view .LVU267
 498:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 823              		.loc 1 498 1 is_stmt 0 view .LVU268
 824 0022 10BD     		pop	{r4, pc}
 825              	.LVL43:
 826              	.L71:
 827              	.LCFI6:
 828              		.cfi_def_cfa_offset 0
 829              		.cfi_restore 4
 830              		.cfi_restore 14
 464:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 831              		.loc 1 464 12 view .LVU269
 832 0024 0120     		movs	r0, #1
 833              	.LVL44:
 498:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 834              		.loc 1 498 1 view .LVU270
 835 0026 7047     		bx	lr
 836              		.cfi_endproc
 837              	.LFE66:
 839              		.section	.text.HAL_CAN_RequestSleep,"ax",%progbits
 840              		.align	1
 841              		.global	HAL_CAN_RequestSleep
 842              		.syntax unified
 843              		.thumb
 844              		.thumb_func
 846              	HAL_CAN_RequestSleep:
 847              	.LVL45:
 848              	.LFB72:
1101:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1102:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1103:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
1104:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
1105:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
1106:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         of a CAN frame) has been completed.
ARM GAS  /tmp/cc0fpaGl.s 			page 39


1107:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1108:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1109:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status.
1110:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1111:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
1112:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 849              		.loc 1 1112 1 is_stmt 1 view -0
 850              		.cfi_startproc
 851              		@ args = 0, pretend = 0, frame = 0
 852              		@ frame_needed = 0, uses_anonymous_args = 0
 853              		@ link register save eliminated.
1113:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 854              		.loc 1 1113 3 view .LVU272
 855              		.loc 1 1113 24 is_stmt 0 view .LVU273
 856 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 857              	.LVL46:
1114:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1115:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 858              		.loc 1 1115 3 is_stmt 1 view .LVU274
 859              		.loc 1 1115 38 is_stmt 0 view .LVU275
 860 0004 013B     		subs	r3, r3, #1
 861              	.LVL47:
 862              		.loc 1 1115 38 view .LVU276
 863 0006 DBB2     		uxtb	r3, r3
 864              		.loc 1 1115 6 view .LVU277
 865 0008 012B     		cmp	r3, #1
 866 000a 05D9     		bls	.L79
1116:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1117:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1118:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Request Sleep mode */
1119:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
1120:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1121:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1122:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1123:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1124:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1125:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1126:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1127:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 867              		.loc 1 1127 5 is_stmt 1 view .LVU278
 868              		.loc 1 1127 21 is_stmt 0 view .LVU279
 869 000c 436A     		ldr	r3, [r0, #36]
 870 000e 43F48023 		orr	r3, r3, #262144
 871 0012 4362     		str	r3, [r0, #36]
1128:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1129:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1130:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 872              		.loc 1 1130 5 is_stmt 1 view .LVU280
 873              		.loc 1 1130 12 is_stmt 0 view .LVU281
 874 0014 0120     		movs	r0, #1
 875              	.LVL48:
1131:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1132:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 876              		.loc 1 1132 1 view .LVU282
 877 0016 7047     		bx	lr
 878              	.LVL49:
 879              	.L79:
ARM GAS  /tmp/cc0fpaGl.s 			page 40


1119:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 880              		.loc 1 1119 5 is_stmt 1 view .LVU283
 881 0018 0268     		ldr	r2, [r0]
 882 001a 1368     		ldr	r3, [r2]
 883 001c 43F00203 		orr	r3, r3, #2
 884 0020 1360     		str	r3, [r2]
1122:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 885              		.loc 1 1122 5 view .LVU284
1122:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 886              		.loc 1 1122 12 is_stmt 0 view .LVU285
 887 0022 0020     		movs	r0, #0
 888              	.LVL50:
1122:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 889              		.loc 1 1122 12 view .LVU286
 890 0024 7047     		bx	lr
 891              		.cfi_endproc
 892              	.LFE72:
 894              		.section	.text.HAL_CAN_WakeUp,"ax",%progbits
 895              		.align	1
 896              		.global	HAL_CAN_WakeUp
 897              		.syntax unified
 898              		.thumb
 899              		.thumb_func
 901              	HAL_CAN_WakeUp:
 902              	.LVL51:
 903              	.LFB73:
1133:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1134:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1135:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Wake up from sleep mode.
1136:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
1137:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         is exited.
1138:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1139:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1140:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status.
1141:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1142:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
1143:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 904              		.loc 1 1143 1 is_stmt 1 view -0
 905              		.cfi_startproc
 906              		@ args = 0, pretend = 0, frame = 8
 907              		@ frame_needed = 0, uses_anonymous_args = 0
 908              		@ link register save eliminated.
 909              		.loc 1 1143 1 is_stmt 0 view .LVU288
 910 0000 82B0     		sub	sp, sp, #8
 911              	.LCFI7:
 912              		.cfi_def_cfa_offset 8
1144:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   __IO uint32_t count = 0;
 913              		.loc 1 1144 3 is_stmt 1 view .LVU289
 914              		.loc 1 1144 17 is_stmt 0 view .LVU290
 915 0002 0023     		movs	r3, #0
 916 0004 0193     		str	r3, [sp, #4]
1145:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t timeout = 1000000U;
 917              		.loc 1 1145 3 is_stmt 1 view .LVU291
 918              	.LVL52:
1146:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 919              		.loc 1 1146 3 view .LVU292
 920              		.loc 1 1146 24 is_stmt 0 view .LVU293
ARM GAS  /tmp/cc0fpaGl.s 			page 41


 921 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 922              	.LVL53:
1147:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1148:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 923              		.loc 1 1148 3 is_stmt 1 view .LVU294
 924              		.loc 1 1148 38 is_stmt 0 view .LVU295
 925 000a 013B     		subs	r3, r3, #1
 926              	.LVL54:
 927              		.loc 1 1148 38 view .LVU296
 928 000c DBB2     		uxtb	r3, r3
 929              		.loc 1 1148 6 view .LVU297
 930 000e 012B     		cmp	r3, #1
 931 0010 18D8     		bhi	.L81
1149:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1150:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1151:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wake up request */
1152:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 932              		.loc 1 1152 5 is_stmt 1 view .LVU298
 933 0012 0268     		ldr	r2, [r0]
 934 0014 1368     		ldr	r3, [r2]
 935 0016 23F00203 		bic	r3, r3, #2
 936 001a 1360     		str	r3, [r2]
 937              	.L84:
1153:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1154:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wait sleep mode is exited */
1155:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     do
 938              		.loc 1 1155 5 view .LVU299
1156:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1157:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Increment counter */
1158:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       count++;
 939              		.loc 1 1158 7 view .LVU300
 940              		.loc 1 1158 12 is_stmt 0 view .LVU301
 941 001c 019B     		ldr	r3, [sp, #4]
 942 001e 0133     		adds	r3, r3, #1
 943 0020 0193     		str	r3, [sp, #4]
1159:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1160:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check if timeout is reached */
1161:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (count > timeout)
 944              		.loc 1 1161 7 is_stmt 1 view .LVU302
 945              		.loc 1 1161 17 is_stmt 0 view .LVU303
 946 0022 019A     		ldr	r2, [sp, #4]
 947              		.loc 1 1161 10 view .LVU304
 948 0024 0B4B     		ldr	r3, .L87
 949 0026 9A42     		cmp	r2, r3
 950 0028 06D8     		bhi	.L86
1162:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1163:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1164:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1165:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1166:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1167:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1168:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1169:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 951              		.loc 1 1169 11 is_stmt 1 view .LVU305
 952              		.loc 1 1169 17 is_stmt 0 view .LVU306
 953 002a 0368     		ldr	r3, [r0]
 954              		.loc 1 1169 27 view .LVU307
ARM GAS  /tmp/cc0fpaGl.s 			page 42


 955 002c 5B68     		ldr	r3, [r3, #4]
 956              		.loc 1 1169 5 view .LVU308
 957 002e 13F0020F 		tst	r3, #2
 958 0032 F3D1     		bne	.L84
1170:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1171:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1172:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 959              		.loc 1 1172 12 view .LVU309
 960 0034 0020     		movs	r0, #0
 961              	.LVL55:
 962              		.loc 1 1172 12 view .LVU310
 963 0036 0AE0     		b	.L83
 964              	.LVL56:
 965              	.L86:
1164:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 966              		.loc 1 1164 9 is_stmt 1 view .LVU311
1164:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 967              		.loc 1 1164 25 is_stmt 0 view .LVU312
 968 0038 436A     		ldr	r3, [r0, #36]
 969 003a 43F40033 		orr	r3, r3, #131072
 970 003e 4362     		str	r3, [r0, #36]
1166:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 971              		.loc 1 1166 9 is_stmt 1 view .LVU313
1166:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 972              		.loc 1 1166 16 is_stmt 0 view .LVU314
 973 0040 0120     		movs	r0, #1
 974              	.LVL57:
1166:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 975              		.loc 1 1166 16 view .LVU315
 976 0042 04E0     		b	.L83
 977              	.LVL58:
 978              	.L81:
1173:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1174:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1175:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1176:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1177:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 979              		.loc 1 1177 5 is_stmt 1 view .LVU316
 980              		.loc 1 1177 21 is_stmt 0 view .LVU317
 981 0044 436A     		ldr	r3, [r0, #36]
 982 0046 43F48023 		orr	r3, r3, #262144
 983 004a 4362     		str	r3, [r0, #36]
1178:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1179:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 984              		.loc 1 1179 5 is_stmt 1 view .LVU318
 985              		.loc 1 1179 12 is_stmt 0 view .LVU319
 986 004c 0120     		movs	r0, #1
 987              	.LVL59:
 988              	.L83:
1180:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1181:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 989              		.loc 1 1181 1 view .LVU320
 990 004e 02B0     		add	sp, sp, #8
 991              	.LCFI8:
 992              		.cfi_def_cfa_offset 0
 993              		@ sp needed
 994 0050 7047     		bx	lr
ARM GAS  /tmp/cc0fpaGl.s 			page 43


 995              	.L88:
 996 0052 00BF     		.align	2
 997              	.L87:
 998 0054 40420F00 		.word	1000000
 999              		.cfi_endproc
 1000              	.LFE73:
 1002              		.section	.text.HAL_CAN_IsSleepActive,"ax",%progbits
 1003              		.align	1
 1004              		.global	HAL_CAN_IsSleepActive
 1005              		.syntax unified
 1006              		.thumb
 1007              		.thumb_func
 1009              	HAL_CAN_IsSleepActive:
 1010              	.LVL60:
 1011              	.LFB74:
1182:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1183:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1184:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Check is sleep mode is active.
1185:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1186:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1187:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Status
1188:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
1189:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 1 : Sleep mode is active.
1190:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1191:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
1192:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1012              		.loc 1 1192 1 is_stmt 1 view -0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 0
 1015              		@ frame_needed = 0, uses_anonymous_args = 0
 1016              		@ link register save eliminated.
1193:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t status = 0U;
 1017              		.loc 1 1193 3 view .LVU322
1194:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1018              		.loc 1 1194 3 view .LVU323
 1019              		.loc 1 1194 24 is_stmt 0 view .LVU324
 1020 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1021              	.LVL61:
1195:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1196:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1022              		.loc 1 1196 3 is_stmt 1 view .LVU325
 1023              		.loc 1 1196 38 is_stmt 0 view .LVU326
 1024 0004 013B     		subs	r3, r3, #1
 1025              	.LVL62:
 1026              		.loc 1 1196 38 view .LVU327
 1027 0006 DBB2     		uxtb	r3, r3
 1028              		.loc 1 1196 6 view .LVU328
 1029 0008 012B     		cmp	r3, #1
 1030 000a 01D9     		bls	.L93
1193:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1031              		.loc 1 1193 12 view .LVU329
 1032 000c 0020     		movs	r0, #0
 1033              	.LVL63:
1193:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1034              		.loc 1 1193 12 view .LVU330
 1035 000e 7047     		bx	lr
 1036              	.LVL64:
ARM GAS  /tmp/cc0fpaGl.s 			page 44


 1037              	.L93:
1197:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1198:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1199:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Sleep mode */
1200:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 1038              		.loc 1 1200 5 is_stmt 1 view .LVU331
 1039              		.loc 1 1200 14 is_stmt 0 view .LVU332
 1040 0010 0368     		ldr	r3, [r0]
 1041              		.loc 1 1200 24 view .LVU333
 1042 0012 5868     		ldr	r0, [r3, #4]
 1043              	.LVL65:
 1044              		.loc 1 1200 8 view .LVU334
 1045 0014 10F00200 		ands	r0, r0, #2
 1046 0018 00D1     		bne	.L92
 1047 001a 7047     		bx	lr
 1048              	.L92:
1201:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1202:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       status = 1U;
 1049              		.loc 1 1202 14 view .LVU335
 1050 001c 0120     		movs	r0, #1
 1051              	.LVL66:
1203:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1204:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1205:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1206:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return function status */
1207:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
 1052              		.loc 1 1207 3 is_stmt 1 view .LVU336
1208:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1053              		.loc 1 1208 1 is_stmt 0 view .LVU337
 1054 001e 7047     		bx	lr
 1055              		.cfi_endproc
 1056              	.LFE74:
 1058              		.section	.text.HAL_CAN_AddTxMessage,"ax",%progbits
 1059              		.align	1
 1060              		.global	HAL_CAN_AddTxMessage
 1061              		.syntax unified
 1062              		.thumb
 1063              		.thumb_func
 1065              	HAL_CAN_AddTxMessage:
 1066              	.LVL67:
 1067              	.LFB75:
1209:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1210:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1211:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
1212:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         corresponding transmission request.
1213:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1214:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1215:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
1216:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
1217:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
1218:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
1219:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
1220:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1221:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1222:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8
1223:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1068              		.loc 1 1223 1 is_stmt 1 view -0
ARM GAS  /tmp/cc0fpaGl.s 			page 45


 1069              		.cfi_startproc
 1070              		@ args = 0, pretend = 0, frame = 0
 1071              		@ frame_needed = 0, uses_anonymous_args = 0
 1072              		.loc 1 1223 1 is_stmt 0 view .LVU339
 1073 0000 30B5     		push	{r4, r5, lr}
 1074              	.LCFI9:
 1075              		.cfi_def_cfa_offset 12
 1076              		.cfi_offset 4, -12
 1077              		.cfi_offset 5, -8
 1078              		.cfi_offset 14, -4
1224:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t transmitmailbox;
 1079              		.loc 1 1224 3 is_stmt 1 view .LVU340
1225:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1080              		.loc 1 1225 3 view .LVU341
 1081              		.loc 1 1225 24 is_stmt 0 view .LVU342
 1082 0002 90F820C0 		ldrb	ip, [r0, #32]	@ zero_extendqisi2
 1083              	.LVL68:
1226:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsr = READ_REG(hcan->Instance->TSR);
 1084              		.loc 1 1226 3 is_stmt 1 view .LVU343
 1085              		.loc 1 1226 12 is_stmt 0 view .LVU344
 1086 0006 0468     		ldr	r4, [r0]
 1087 0008 A468     		ldr	r4, [r4, #8]
 1088              	.LVL69:
1227:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1228:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check the parameters */
1229:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 1089              		.loc 1 1229 3 is_stmt 1 view .LVU345
1230:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
 1090              		.loc 1 1230 3 view .LVU346
1231:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
 1091              		.loc 1 1231 3 view .LVU347
1232:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
 1092              		.loc 1 1232 3 view .LVU348
1233:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1234:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
1235:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1236:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1237:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1238:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
 1093              		.loc 1 1238 5 view .LVU349
1239:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1240:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 1094              		.loc 1 1240 3 view .LVU350
1241:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1242:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1095              		.loc 1 1242 3 view .LVU351
 1096              		.loc 1 1242 38 is_stmt 0 view .LVU352
 1097 000a 0CF1FF3C 		add	ip, ip, #-1
 1098              	.LVL70:
 1099              		.loc 1 1242 38 view .LVU353
 1100 000e 5FFA8CFC 		uxtb	ip, ip
 1101              		.loc 1 1242 6 view .LVU354
 1102 0012 BCF1010F 		cmp	ip, #1
 1103 0016 6BD8     		bhi	.L95
1243:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1244:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1245:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
ARM GAS  /tmp/cc0fpaGl.s 			page 46


1246:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (((tsr & CAN_TSR_TME0) != 0U) ||
 1104              		.loc 1 1246 5 is_stmt 1 view .LVU355
 1105              		.loc 1 1246 8 is_stmt 0 view .LVU356
 1106 0018 14F0E05F 		tst	r4, #469762048
 1107 001c 62D0     		beq	.L96
1247:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
1248:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((tsr & CAN_TSR_TME2) != 0U))
1249:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1250:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Select an empty transmit mailbox */
1251:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 1108              		.loc 1 1251 7 is_stmt 1 view .LVU357
 1109              		.loc 1 1251 23 is_stmt 0 view .LVU358
 1110 001e C4F3016C 		ubfx	ip, r4, #24, #2
 1111              	.LVL71:
1252:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1253:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check transmit mailbox value */
1254:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (transmitmailbox > 2U)
 1112              		.loc 1 1254 7 is_stmt 1 view .LVU359
 1113              		.loc 1 1254 10 is_stmt 0 view .LVU360
 1114 0022 BCF1020F 		cmp	ip, #2
 1115 0026 05D9     		bls	.L97
1255:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1256:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1257:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 1116              		.loc 1 1257 9 is_stmt 1 view .LVU361
 1117              		.loc 1 1257 25 is_stmt 0 view .LVU362
 1118 0028 436A     		ldr	r3, [r0, #36]
 1119              	.LVL72:
 1120              		.loc 1 1257 25 view .LVU363
 1121 002a 43F40003 		orr	r3, r3, #8388608
 1122 002e 4362     		str	r3, [r0, #36]
1258:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1259:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
 1123              		.loc 1 1259 9 is_stmt 1 view .LVU364
 1124              		.loc 1 1259 16 is_stmt 0 view .LVU365
 1125 0030 0120     		movs	r0, #1
 1126              	.LVL73:
 1127              		.loc 1 1259 16 view .LVU366
 1128 0032 62E0     		b	.L98
 1129              	.LVL74:
 1130              	.L97:
1260:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1261:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1262:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Store the Tx mailbox */
1263:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *pTxMailbox = (uint32_t)1 << transmitmailbox;
 1131              		.loc 1 1263 7 is_stmt 1 view .LVU367
 1132              		.loc 1 1263 33 is_stmt 0 view .LVU368
 1133 0034 0124     		movs	r4, #1
 1134              	.LVL75:
 1135              		.loc 1 1263 33 view .LVU369
 1136 0036 04FA0CF4 		lsl	r4, r4, ip
 1137              		.loc 1 1263 19 view .LVU370
 1138 003a 1C60     		str	r4, [r3]
1264:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1265:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the Id */
1266:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
 1139              		.loc 1 1266 7 is_stmt 1 view .LVU371
ARM GAS  /tmp/cc0fpaGl.s 			page 47


 1140              		.loc 1 1266 18 is_stmt 0 view .LVU372
 1141 003c 8B68     		ldr	r3, [r1, #8]
 1142              	.LVL76:
 1143              		.loc 1 1266 10 view .LVU373
 1144 003e 002B     		cmp	r3, #0
 1145 0040 3DD1     		bne	.L99
1267:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1268:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 1146              		.loc 1 1268 9 is_stmt 1 view .LVU374
 1147              		.loc 1 1268 68 is_stmt 0 view .LVU375
 1148 0042 0D68     		ldr	r5, [r1]
1269:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 1149              		.loc 1 1269 67 view .LVU376
 1150 0044 CB68     		ldr	r3, [r1, #12]
1268:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 1151              		.loc 1 1268 13 view .LVU377
 1152 0046 0468     		ldr	r4, [r0]
1268:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 1153              		.loc 1 1268 98 view .LVU378
 1154 0048 43EA4555 		orr	r5, r3, r5, lsl #21
1268:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 1155              		.loc 1 1268 57 view .LVU379
 1156 004c 0CF11803 		add	r3, ip, #24
 1157 0050 1B01     		lsls	r3, r3, #4
 1158 0052 E550     		str	r5, [r4, r3]
 1159              	.L100:
1270:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1271:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1272:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1273:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
1274:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
1275:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
1276:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1277:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1278:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the DLC */
1279:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 1160              		.loc 1 1279 7 is_stmt 1 view .LVU380
 1161              		.loc 1 1279 11 is_stmt 0 view .LVU381
 1162 0054 0368     		ldr	r3, [r0]
 1163              		.loc 1 1279 66 view .LVU382
 1164 0056 0C69     		ldr	r4, [r1, #16]
 1165              		.loc 1 1279 56 view .LVU383
 1166 0058 0CF1180E 		add	lr, ip, #24
 1167 005c 03EB0E13 		add	r3, r3, lr, lsl #4
 1168 0060 5C60     		str	r4, [r3, #4]
1280:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1281:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
1282:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
 1169              		.loc 1 1282 7 is_stmt 1 view .LVU384
 1170              		.loc 1 1282 18 is_stmt 0 view .LVU385
 1171 0062 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 1172              		.loc 1 1282 10 view .LVU386
 1173 0064 012B     		cmp	r3, #1
 1174 0066 35D0     		beq	.L103
 1175              	.LVL77:
 1176              	.L101:
1283:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
ARM GAS  /tmp/cc0fpaGl.s 			page 48


1284:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
1285:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1286:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1287:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the data field */
1288:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 1177              		.loc 1 1288 7 is_stmt 1 view .LVU387
 1178 0068 D179     		ldrb	r1, [r2, #7]	@ zero_extendqisi2
 1179 006a 9379     		ldrb	r3, [r2, #6]	@ zero_extendqisi2
 1180 006c 1B04     		lsls	r3, r3, #16
 1181 006e 43EA0163 		orr	r3, r3, r1, lsl #24
 1182 0072 5179     		ldrb	r1, [r2, #5]	@ zero_extendqisi2
 1183 0074 43EA0123 		orr	r3, r3, r1, lsl #8
 1184 0078 1479     		ldrb	r4, [r2, #4]	@ zero_extendqisi2
 1185 007a 0168     		ldr	r1, [r0]
 1186 007c 2343     		orrs	r3, r3, r4
 1187 007e 01EB0C11 		add	r1, r1, ip, lsl #4
 1188 0082 C1F88C31 		str	r3, [r1, #396]
1289:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
1290:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
1291:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
1292:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
1293:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 1189              		.loc 1 1293 7 view .LVU388
 1190 0086 D178     		ldrb	r1, [r2, #3]	@ zero_extendqisi2
 1191 0088 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1192 008a 1B04     		lsls	r3, r3, #16
 1193 008c 43EA0163 		orr	r3, r3, r1, lsl #24
 1194 0090 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 1195 0092 43EA0123 		orr	r3, r3, r1, lsl #8
 1196 0096 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1197 0098 0268     		ldr	r2, [r0]
 1198              	.LVL78:
 1199              		.loc 1 1293 7 is_stmt 0 view .LVU389
 1200 009a 0B43     		orrs	r3, r3, r1
 1201 009c 02EB0C12 		add	r2, r2, ip, lsl #4
 1202 00a0 C2F88831 		str	r3, [r2, #392]
1294:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
1295:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
1296:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
1297:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
1298:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1299:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Request transmission */
1300:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 1203              		.loc 1 1300 7 is_stmt 1 view .LVU390
 1204 00a4 0268     		ldr	r2, [r0]
 1205 00a6 0CF1180C 		add	ip, ip, #24
 1206              	.LVL79:
 1207              		.loc 1 1300 7 is_stmt 0 view .LVU391
 1208 00aa 4FEA0C1C 		lsl	ip, ip, #4
 1209 00ae 52F80C30 		ldr	r3, [r2, ip]
 1210 00b2 43F00103 		orr	r3, r3, #1
 1211 00b6 42F80C30 		str	r3, [r2, ip]
1301:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1302:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Return function status */
1303:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_OK;
 1212              		.loc 1 1303 7 is_stmt 1 view .LVU392
 1213              		.loc 1 1303 14 is_stmt 0 view .LVU393
ARM GAS  /tmp/cc0fpaGl.s 			page 49


 1214 00ba 0020     		movs	r0, #0
 1215              	.LVL80:
 1216              		.loc 1 1303 14 view .LVU394
 1217 00bc 1DE0     		b	.L98
 1218              	.LVL81:
 1219              	.L99:
1273:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 1220              		.loc 1 1273 9 is_stmt 1 view .LVU395
1273:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 1221              		.loc 1 1273 68 is_stmt 0 view .LVU396
 1222 00be 4C68     		ldr	r4, [r1, #4]
1273:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 1223              		.loc 1 1273 98 view .LVU397
 1224 00c0 43EAC403 		orr	r3, r3, r4, lsl #3
1275:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1225              		.loc 1 1275 67 view .LVU398
 1226 00c4 CC68     		ldr	r4, [r1, #12]
1274:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 1227              		.loc 1 1274 73 view .LVU399
 1228 00c6 2343     		orrs	r3, r3, r4
1273:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 1229              		.loc 1 1273 57 view .LVU400
 1230 00c8 0CF11804 		add	r4, ip, #24
 1231 00cc 2401     		lsls	r4, r4, #4
 1232 00ce 0568     		ldr	r5, [r0]
 1233 00d0 2B51     		str	r3, [r5, r4]
 1234 00d2 BFE7     		b	.L100
 1235              	.L103:
1284:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1236              		.loc 1 1284 9 is_stmt 1 view .LVU401
 1237 00d4 0368     		ldr	r3, [r0]
 1238 00d6 03EB0E13 		add	r3, r3, lr, lsl #4
 1239 00da 5968     		ldr	r1, [r3, #4]
 1240              	.LVL82:
1284:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1241              		.loc 1 1284 9 is_stmt 0 view .LVU402
 1242 00dc 41F48071 		orr	r1, r1, #256
 1243 00e0 5960     		str	r1, [r3, #4]
 1244 00e2 C1E7     		b	.L101
 1245              	.LVL83:
 1246              	.L96:
1304:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1305:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
1306:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1307:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Update error code */
1308:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1247              		.loc 1 1308 7 is_stmt 1 view .LVU403
 1248              		.loc 1 1308 23 is_stmt 0 view .LVU404
 1249 00e4 436A     		ldr	r3, [r0, #36]
 1250              	.LVL84:
 1251              		.loc 1 1308 23 view .LVU405
 1252 00e6 43F40013 		orr	r3, r3, #2097152
 1253 00ea 4362     		str	r3, [r0, #36]
1309:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1310:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
 1254              		.loc 1 1310 7 is_stmt 1 view .LVU406
 1255              		.loc 1 1310 14 is_stmt 0 view .LVU407
ARM GAS  /tmp/cc0fpaGl.s 			page 50


 1256 00ec 0120     		movs	r0, #1
 1257              	.LVL85:
 1258              		.loc 1 1310 14 view .LVU408
 1259 00ee 04E0     		b	.L98
 1260              	.LVL86:
 1261              	.L95:
1311:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1312:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1313:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1314:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1315:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1316:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1262              		.loc 1 1316 5 is_stmt 1 view .LVU409
 1263              		.loc 1 1316 21 is_stmt 0 view .LVU410
 1264 00f0 436A     		ldr	r3, [r0, #36]
 1265              	.LVL87:
 1266              		.loc 1 1316 21 view .LVU411
 1267 00f2 43F48023 		orr	r3, r3, #262144
 1268 00f6 4362     		str	r3, [r0, #36]
1317:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1318:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1269              		.loc 1 1318 5 is_stmt 1 view .LVU412
 1270              		.loc 1 1318 12 is_stmt 0 view .LVU413
 1271 00f8 0120     		movs	r0, #1
 1272              	.LVL88:
 1273              	.L98:
1319:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1320:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1274              		.loc 1 1320 1 view .LVU414
 1275 00fa 30BD     		pop	{r4, r5, pc}
 1276              		.cfi_endproc
 1277              	.LFE75:
 1279              		.section	.text.HAL_CAN_AbortTxRequest,"ax",%progbits
 1280              		.align	1
 1281              		.global	HAL_CAN_AbortTxRequest
 1282              		.syntax unified
 1283              		.thumb
 1284              		.thumb_func
 1286              	HAL_CAN_AbortTxRequest:
 1287              	.LVL89:
 1288              	.LFB76:
1321:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1322:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1323:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Abort transmission requests
1324:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1325:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1326:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
1327:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1328:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1329:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1330:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1331:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1289              		.loc 1 1331 1 is_stmt 1 view -0
 1290              		.cfi_startproc
 1291              		@ args = 0, pretend = 0, frame = 0
 1292              		@ frame_needed = 0, uses_anonymous_args = 0
 1293              		@ link register save eliminated.
ARM GAS  /tmp/cc0fpaGl.s 			page 51


1332:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1294              		.loc 1 1332 3 view .LVU416
 1295              		.loc 1 1332 24 is_stmt 0 view .LVU417
 1296 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1297              	.LVL90:
1333:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1334:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1335:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 1298              		.loc 1 1335 3 is_stmt 1 view .LVU418
1336:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1337:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1299              		.loc 1 1337 3 view .LVU419
 1300              		.loc 1 1337 38 is_stmt 0 view .LVU420
 1301 0004 013B     		subs	r3, r3, #1
 1302              	.LVL91:
 1303              		.loc 1 1337 38 view .LVU421
 1304 0006 DBB2     		uxtb	r3, r3
 1305              		.loc 1 1337 6 view .LVU422
 1306 0008 012B     		cmp	r3, #1
 1307 000a 05D9     		bls	.L110
1338:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1339:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1340:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 0 */
1341:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
1342:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1343:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
1344:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
1345:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1346:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1347:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 1 */
1348:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
1349:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1350:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
1351:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
1352:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1353:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1354:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 2 */
1355:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
1356:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1357:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
1358:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
1359:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1360:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1361:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1362:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1363:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1364:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1365:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1366:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1367:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1308              		.loc 1 1367 5 is_stmt 1 view .LVU423
 1309              		.loc 1 1367 21 is_stmt 0 view .LVU424
 1310 000c 436A     		ldr	r3, [r0, #36]
 1311 000e 43F48023 		orr	r3, r3, #262144
 1312 0012 4362     		str	r3, [r0, #36]
1368:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1369:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
ARM GAS  /tmp/cc0fpaGl.s 			page 52


 1313              		.loc 1 1369 5 is_stmt 1 view .LVU425
 1314              		.loc 1 1369 12 is_stmt 0 view .LVU426
 1315 0014 0120     		movs	r0, #1
 1316              	.LVL92:
1370:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1371:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1317              		.loc 1 1371 1 view .LVU427
 1318 0016 7047     		bx	lr
 1319              	.LVL93:
 1320              	.L110:
1341:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1321              		.loc 1 1341 5 is_stmt 1 view .LVU428
1341:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1322              		.loc 1 1341 8 is_stmt 0 view .LVU429
 1323 0018 11F0010F 		tst	r1, #1
 1324 001c 04D0     		beq	.L106
1344:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1325              		.loc 1 1344 7 is_stmt 1 view .LVU430
 1326 001e 0268     		ldr	r2, [r0]
 1327 0020 9368     		ldr	r3, [r2, #8]
 1328 0022 43F08003 		orr	r3, r3, #128
 1329 0026 9360     		str	r3, [r2, #8]
 1330              	.L106:
1348:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1331              		.loc 1 1348 5 view .LVU431
1348:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1332              		.loc 1 1348 8 is_stmt 0 view .LVU432
 1333 0028 11F0020F 		tst	r1, #2
 1334 002c 04D0     		beq	.L107
1351:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1335              		.loc 1 1351 7 is_stmt 1 view .LVU433
 1336 002e 0268     		ldr	r2, [r0]
 1337 0030 9368     		ldr	r3, [r2, #8]
 1338 0032 43F40043 		orr	r3, r3, #32768
 1339 0036 9360     		str	r3, [r2, #8]
 1340              	.L107:
1355:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1341              		.loc 1 1355 5 view .LVU434
1355:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1342              		.loc 1 1355 8 is_stmt 0 view .LVU435
 1343 0038 11F0040F 		tst	r1, #4
 1344 003c 04D0     		beq	.L108
1358:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1345              		.loc 1 1358 7 is_stmt 1 view .LVU436
 1346 003e 0268     		ldr	r2, [r0]
 1347 0040 9368     		ldr	r3, [r2, #8]
 1348 0042 43F40003 		orr	r3, r3, #8388608
 1349 0046 9360     		str	r3, [r2, #8]
 1350              	.L108:
1362:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1351              		.loc 1 1362 5 view .LVU437
1362:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1352              		.loc 1 1362 12 is_stmt 0 view .LVU438
 1353 0048 0020     		movs	r0, #0
 1354              	.LVL94:
1362:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1355              		.loc 1 1362 12 view .LVU439
ARM GAS  /tmp/cc0fpaGl.s 			page 53


 1356 004a 7047     		bx	lr
 1357              		.cfi_endproc
 1358              	.LFE76:
 1360              		.section	.text.HAL_CAN_GetTxMailboxesFreeLevel,"ax",%progbits
 1361              		.align	1
 1362              		.global	HAL_CAN_GetTxMailboxesFreeLevel
 1363              		.syntax unified
 1364              		.thumb
 1365              		.thumb_func
 1367              	HAL_CAN_GetTxMailboxesFreeLevel:
 1368              	.LVL95:
 1369              	.LFB77:
1372:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1373:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1374:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
1375:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1376:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1377:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
1378:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1379:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
1380:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1370              		.loc 1 1380 1 is_stmt 1 view -0
 1371              		.cfi_startproc
 1372              		@ args = 0, pretend = 0, frame = 0
 1373              		@ frame_needed = 0, uses_anonymous_args = 0
 1374              		@ link register save eliminated.
1381:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t freelevel = 0U;
 1375              		.loc 1 1381 3 view .LVU441
1382:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1376              		.loc 1 1382 3 view .LVU442
 1377              		.loc 1 1382 24 is_stmt 0 view .LVU443
 1378 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1379              	.LVL96:
1383:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1384:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1380              		.loc 1 1384 3 is_stmt 1 view .LVU444
 1381              		.loc 1 1384 38 is_stmt 0 view .LVU445
 1382 0004 013B     		subs	r3, r3, #1
 1383              	.LVL97:
 1384              		.loc 1 1384 38 view .LVU446
 1385 0006 DBB2     		uxtb	r3, r3
 1386              		.loc 1 1384 6 view .LVU447
 1387 0008 012B     		cmp	r3, #1
 1388 000a 01D9     		bls	.L117
1381:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1389              		.loc 1 1381 12 view .LVU448
 1390 000c 0020     		movs	r0, #0
 1391              	.LVL98:
1385:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1386:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1387:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
1388:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
1389:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1390:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       freelevel++;
1391:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1392:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1393:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
ARM GAS  /tmp/cc0fpaGl.s 			page 54


1394:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
1395:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1396:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       freelevel++;
1397:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1398:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1399:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1400:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
1401:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1402:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       freelevel++;
1403:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1404:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1405:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1406:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1407:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return freelevel;
 1392              		.loc 1 1407 3 is_stmt 1 view .LVU449
 1393              	.L111:
1408:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1394              		.loc 1 1408 1 is_stmt 0 view .LVU450
 1395 000e 7047     		bx	lr
 1396              	.LVL99:
 1397              	.L117:
1388:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1398              		.loc 1 1388 5 is_stmt 1 view .LVU451
1388:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1399              		.loc 1 1388 14 is_stmt 0 view .LVU452
 1400 0010 0368     		ldr	r3, [r0]
1388:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1401              		.loc 1 1388 24 view .LVU453
 1402 0012 9868     		ldr	r0, [r3, #8]
 1403              	.LVL100:
1388:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1404              		.loc 1 1388 8 view .LVU454
 1405 0014 10F08060 		ands	r0, r0, #67108864
 1406 0018 00D0     		beq	.L113
1390:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1407              		.loc 1 1390 16 view .LVU455
 1408 001a 0120     		movs	r0, #1
 1409              	.L113:
 1410              	.LVL101:
1394:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1411              		.loc 1 1394 5 is_stmt 1 view .LVU456
1394:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1412              		.loc 1 1394 24 is_stmt 0 view .LVU457
 1413 001c 9A68     		ldr	r2, [r3, #8]
1394:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1414              		.loc 1 1394 8 view .LVU458
 1415 001e 12F0006F 		tst	r2, #134217728
 1416 0022 00D0     		beq	.L114
1396:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1417              		.loc 1 1396 7 is_stmt 1 view .LVU459
1396:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1418              		.loc 1 1396 16 is_stmt 0 view .LVU460
 1419 0024 0130     		adds	r0, r0, #1
 1420              	.LVL102:
 1421              	.L114:
1400:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1422              		.loc 1 1400 5 is_stmt 1 view .LVU461
ARM GAS  /tmp/cc0fpaGl.s 			page 55


1400:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1423              		.loc 1 1400 24 is_stmt 0 view .LVU462
 1424 0026 9B68     		ldr	r3, [r3, #8]
1400:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1425              		.loc 1 1400 8 view .LVU463
 1426 0028 13F0805F 		tst	r3, #268435456
 1427 002c EFD0     		beq	.L111
1402:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1428              		.loc 1 1402 7 is_stmt 1 view .LVU464
1402:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1429              		.loc 1 1402 16 is_stmt 0 view .LVU465
 1430 002e 0130     		adds	r0, r0, #1
 1431              	.LVL103:
1402:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1432              		.loc 1 1402 16 view .LVU466
 1433 0030 7047     		bx	lr
 1434              		.cfi_endproc
 1435              	.LFE77:
 1437              		.section	.text.HAL_CAN_IsTxMessagePending,"ax",%progbits
 1438              		.align	1
 1439              		.global	HAL_CAN_IsTxMessagePending
 1440              		.syntax unified
 1441              		.thumb
 1442              		.thumb_func
 1444              	HAL_CAN_IsTxMessagePending:
 1445              	.LVL104:
 1446              	.LFB78:
1409:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1410:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1411:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1412:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         Mailboxes.
1413:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1414:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1415:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1416:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1417:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Status
1418:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1419:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1420:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *                Tx Mailbox.
1421:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1422:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1423:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1447              		.loc 1 1423 1 is_stmt 1 view -0
 1448              		.cfi_startproc
 1449              		@ args = 0, pretend = 0, frame = 0
 1450              		@ frame_needed = 0, uses_anonymous_args = 0
 1451              		@ link register save eliminated.
1424:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t status = 0U;
 1452              		.loc 1 1424 3 view .LVU468
1425:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1453              		.loc 1 1425 3 view .LVU469
 1454              		.loc 1 1425 24 is_stmt 0 view .LVU470
 1455 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1456              	.LVL105:
1426:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1427:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1428:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
ARM GAS  /tmp/cc0fpaGl.s 			page 56


 1457              		.loc 1 1428 3 is_stmt 1 view .LVU471
1429:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1430:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1458              		.loc 1 1430 3 view .LVU472
 1459              		.loc 1 1430 38 is_stmt 0 view .LVU473
 1460 0004 013B     		subs	r3, r3, #1
 1461              	.LVL106:
 1462              		.loc 1 1430 38 view .LVU474
 1463 0006 DBB2     		uxtb	r3, r3
 1464              		.loc 1 1430 6 view .LVU475
 1465 0008 012B     		cmp	r3, #1
 1466 000a 01D9     		bls	.L122
1424:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1467              		.loc 1 1424 12 view .LVU476
 1468 000c 0020     		movs	r0, #0
 1469              	.LVL107:
1424:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1470              		.loc 1 1424 12 view .LVU477
 1471 000e 7047     		bx	lr
 1472              	.LVL108:
 1473              	.L122:
1431:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1432:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1433:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1434:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
 1474              		.loc 1 1434 5 is_stmt 1 view .LVU478
 1475              		.loc 1 1434 14 is_stmt 0 view .LVU479
 1476 0010 0368     		ldr	r3, [r0]
 1477              		.loc 1 1434 24 view .LVU480
 1478 0012 9B68     		ldr	r3, [r3, #8]
 1479              		.loc 1 1434 30 view .LVU481
 1480 0014 03EA8163 		and	r3, r3, r1, lsl #26
 1481              		.loc 1 1434 8 view .LVU482
 1482 0018 B3EB816F 		cmp	r3, r1, lsl #26
 1483 001c 01D0     		beq	.L123
1435:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1436:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       status = 1U;
 1484              		.loc 1 1436 14 view .LVU483
 1485 001e 0120     		movs	r0, #1
 1486              	.LVL109:
1437:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1438:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1439:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1440:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return status */
1441:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
 1487              		.loc 1 1441 3 is_stmt 1 view .LVU484
1442:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1488              		.loc 1 1442 1 is_stmt 0 view .LVU485
 1489 0020 7047     		bx	lr
 1490              	.LVL110:
 1491              	.L123:
1424:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1492              		.loc 1 1424 12 view .LVU486
 1493 0022 0020     		movs	r0, #0
 1494              	.LVL111:
1424:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1495              		.loc 1 1424 12 view .LVU487
ARM GAS  /tmp/cc0fpaGl.s 			page 57


 1496 0024 7047     		bx	lr
 1497              		.cfi_endproc
 1498              	.LFE78:
 1500              		.section	.text.HAL_CAN_GetTxTimestamp,"ax",%progbits
 1501              		.align	1
 1502              		.global	HAL_CAN_GetTxTimestamp
 1503              		.syntax unified
 1504              		.thumb
 1505              		.thumb_func
 1507              	HAL_CAN_GetTxTimestamp:
 1508              	.LVL112:
 1509              	.LFB79:
1443:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1444:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1445:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1446:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             mode is enabled.
1447:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1448:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1449:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1450:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         read.
1451:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1452:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1453:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1454:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
1455:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1510              		.loc 1 1455 1 is_stmt 1 view -0
 1511              		.cfi_startproc
 1512              		@ args = 0, pretend = 0, frame = 0
 1513              		@ frame_needed = 0, uses_anonymous_args = 0
 1514              		@ link register save eliminated.
1456:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t timestamp = 0U;
 1515              		.loc 1 1456 3 view .LVU489
1457:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t transmitmailbox;
 1516              		.loc 1 1457 3 view .LVU490
1458:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1517              		.loc 1 1458 3 view .LVU491
 1518              		.loc 1 1458 24 is_stmt 0 view .LVU492
 1519 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1520              	.LVL113:
1459:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1460:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1461:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
 1521              		.loc 1 1461 3 is_stmt 1 view .LVU493
1462:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1463:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1522              		.loc 1 1463 3 view .LVU494
 1523              		.loc 1 1463 38 is_stmt 0 view .LVU495
 1524 0004 013B     		subs	r3, r3, #1
 1525              	.LVL114:
 1526              		.loc 1 1463 38 view .LVU496
 1527 0006 DBB2     		uxtb	r3, r3
 1528              		.loc 1 1463 6 view .LVU497
 1529 0008 012B     		cmp	r3, #1
 1530 000a 01D9     		bls	.L127
1456:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t transmitmailbox;
 1531              		.loc 1 1456 12 view .LVU498
 1532 000c 0020     		movs	r0, #0
ARM GAS  /tmp/cc0fpaGl.s 			page 58


 1533              	.LVL115:
1464:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1465:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1466:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Select the Tx mailbox */
1467:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     transmitmailbox = POSITION_VAL(TxMailbox);
1468:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1469:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get timestamp */
1470:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
1471:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1472:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1473:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return the timestamp */
1474:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return timestamp;
 1534              		.loc 1 1474 3 is_stmt 1 view .LVU499
1475:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1535              		.loc 1 1475 1 is_stmt 0 view .LVU500
 1536 000e 7047     		bx	lr
 1537              	.LVL116:
 1538              	.L127:
1467:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1539              		.loc 1 1467 5 is_stmt 1 view .LVU501
 1540              	.LBB4:
 1541              	.LBI4:
 1542              		.file 2 "drivers/CMSIS/Include/cmsis_gcc.h"
   1:drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
ARM GAS  /tmp/cc0fpaGl.s 			page 59


  35:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/cc0fpaGl.s 			page 60


  92:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
ARM GAS  /tmp/cc0fpaGl.s 			page 61


 149:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
ARM GAS  /tmp/cc0fpaGl.s 			page 62


 206:drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
ARM GAS  /tmp/cc0fpaGl.s 			page 63


 263:drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc0fpaGl.s 			page 64


 320:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc0fpaGl.s 			page 65


 377:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
ARM GAS  /tmp/cc0fpaGl.s 			page 66


 434:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc0fpaGl.s 			page 67


 491:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/cc0fpaGl.s 			page 68


 548:drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc0fpaGl.s 			page 69


 605:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
ARM GAS  /tmp/cc0fpaGl.s 			page 70


 662:drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
ARM GAS  /tmp/cc0fpaGl.s 			page 71


 719:drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/cc0fpaGl.s 			page 72


 776:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc0fpaGl.s 			page 73


 833:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc0fpaGl.s 			page 74


 890:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc0fpaGl.s 			page 75


 947:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 1543              		.loc 2 981 31 view .LVU502
 1544              	.LBB5:
 982:drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 1545              		.loc 2 983 3 view .LVU503
 984:drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1546              		.loc 2 988 4 view .LVU504
 1547              		.syntax unified
 1548              	@ 988 "drivers/CMSIS/Include/cmsis_gcc.h" 1
 1549 0010 91FAA1F1 		rbit r1, r1
 1550              	@ 0 "" 2
 1551              	.LVL117:
 989:drivers/CMSIS/Include/cmsis_gcc.h **** #else
 990:drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:drivers/CMSIS/Include/cmsis_gcc.h **** 
 992:drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:drivers/CMSIS/Include/cmsis_gcc.h ****   {
ARM GAS  /tmp/cc0fpaGl.s 			page 76


 995:drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 996:drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 997:drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 998:drivers/CMSIS/Include/cmsis_gcc.h ****   }
 999:drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1000:drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1001:drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 1552              		.loc 2 1001 3 view .LVU505
 1553              		.loc 2 1001 3 is_stmt 0 view .LVU506
 1554              		.thumb
 1555              		.syntax unified
 1556              	.LBE5:
 1557              	.LBE4:
1467:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1558              		.loc 1 1467 21 view .LVU507
 1559 0014 B1FA81F1 		clz	r1, r1
 1560              	.LVL118:
1470:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1561              		.loc 1 1470 5 is_stmt 1 view .LVU508
1470:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1562              		.loc 1 1470 22 is_stmt 0 view .LVU509
 1563 0018 0368     		ldr	r3, [r0]
1470:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1564              		.loc 1 1470 61 view .LVU510
 1565 001a 1831     		adds	r1, r1, #24
 1566              	.LVL119:
1470:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1567              		.loc 1 1470 61 view .LVU511
 1568 001c 03EB0111 		add	r1, r3, r1, lsl #4
 1569              	.LVL120:
1470:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1570              		.loc 1 1470 61 view .LVU512
 1571 0020 4868     		ldr	r0, [r1, #4]
 1572              	.LVL121:
1470:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1573              		.loc 1 1470 85 view .LVU513
 1574 0022 000C     		lsrs	r0, r0, #16
 1575              	.LVL122:
1470:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1576              		.loc 1 1470 85 view .LVU514
 1577 0024 7047     		bx	lr
 1578              		.cfi_endproc
 1579              	.LFE79:
 1581              		.section	.text.HAL_CAN_GetRxMessage,"ax",%progbits
 1582              		.align	1
 1583              		.global	HAL_CAN_GetRxMessage
 1584              		.syntax unified
 1585              		.thumb
 1586              		.thumb_func
 1588              	HAL_CAN_GetRxMessage:
 1589              	.LVL123:
 1590              	.LFB80:
1476:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1477:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1478:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1479:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1480:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
ARM GAS  /tmp/cc0fpaGl.s 			page 77


1481:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1482:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1483:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
1484:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         of the Rx frame will be stored.
1485:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
1486:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1487:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1488:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDe
1489:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1591              		.loc 1 1489 1 is_stmt 1 view -0
 1592              		.cfi_startproc
 1593              		@ args = 0, pretend = 0, frame = 0
 1594              		@ frame_needed = 0, uses_anonymous_args = 0
 1595              		@ link register save eliminated.
1490:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1596              		.loc 1 1490 3 view .LVU516
 1597              		.loc 1 1490 24 is_stmt 0 view .LVU517
 1598 0000 90F820C0 		ldrb	ip, [r0, #32]	@ zero_extendqisi2
 1599              	.LVL124:
1491:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1492:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
 1600              		.loc 1 1492 3 is_stmt 1 view .LVU518
1493:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1494:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1601              		.loc 1 1494 3 view .LVU519
 1602              		.loc 1 1494 38 is_stmt 0 view .LVU520
 1603 0004 0CF1FF3C 		add	ip, ip, #-1
 1604              	.LVL125:
 1605              		.loc 1 1494 38 view .LVU521
 1606 0008 5FFA8CFC 		uxtb	ip, ip
 1607              		.loc 1 1494 6 view .LVU522
 1608 000c BCF1010F 		cmp	ip, #1
 1609 0010 00F29B80 		bhi	.L129
1489:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1610              		.loc 1 1489 1 view .LVU523
 1611 0014 10B4     		push	{r4}
 1612              	.LCFI10:
 1613              		.cfi_def_cfa_offset 4
 1614              		.cfi_offset 4, -4
1495:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1496:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1497:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the Rx FIFO */
1498:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1615              		.loc 1 1498 5 is_stmt 1 view .LVU524
 1616              		.loc 1 1498 8 is_stmt 0 view .LVU525
 1617 0016 51B9     		cbnz	r1, .L130
1499:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1500:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1501:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 1618              		.loc 1 1501 7 is_stmt 1 view .LVU526
 1619              		.loc 1 1501 16 is_stmt 0 view .LVU527
 1620 0018 0468     		ldr	r4, [r0]
 1621              		.loc 1 1501 26 view .LVU528
 1622 001a E468     		ldr	r4, [r4, #12]
 1623              		.loc 1 1501 10 view .LVU529
 1624 001c 14F0030F 		tst	r4, #3
 1625 0020 10D1     		bne	.L131
ARM GAS  /tmp/cc0fpaGl.s 			page 78


1502:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1503:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1504:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1626              		.loc 1 1504 9 is_stmt 1 view .LVU530
 1627              		.loc 1 1504 25 is_stmt 0 view .LVU531
 1628 0022 436A     		ldr	r3, [r0, #36]
 1629              	.LVL126:
 1630              		.loc 1 1504 25 view .LVU532
 1631 0024 43F40013 		orr	r3, r3, #2097152
 1632 0028 4362     		str	r3, [r0, #36]
1505:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1506:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
 1633              		.loc 1 1506 9 is_stmt 1 view .LVU533
 1634              		.loc 1 1506 16 is_stmt 0 view .LVU534
 1635 002a 0120     		movs	r0, #1
 1636              	.LVL127:
 1637              		.loc 1 1506 16 view .LVU535
 1638 002c 7BE0     		b	.L132
 1639              	.LVL128:
 1640              	.L130:
1507:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1508:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1509:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1510:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1511:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1512:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 1641              		.loc 1 1512 7 is_stmt 1 view .LVU536
 1642              		.loc 1 1512 16 is_stmt 0 view .LVU537
 1643 002e 0468     		ldr	r4, [r0]
 1644              		.loc 1 1512 26 view .LVU538
 1645 0030 2469     		ldr	r4, [r4, #16]
 1646              		.loc 1 1512 10 view .LVU539
 1647 0032 14F0030F 		tst	r4, #3
 1648 0036 05D1     		bne	.L131
1513:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1514:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1515:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1649              		.loc 1 1515 9 is_stmt 1 view .LVU540
 1650              		.loc 1 1515 25 is_stmt 0 view .LVU541
 1651 0038 436A     		ldr	r3, [r0, #36]
 1652              	.LVL129:
 1653              		.loc 1 1515 25 view .LVU542
 1654 003a 43F40013 		orr	r3, r3, #2097152
 1655 003e 4362     		str	r3, [r0, #36]
1516:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1517:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
 1656              		.loc 1 1517 9 is_stmt 1 view .LVU543
 1657              		.loc 1 1517 16 is_stmt 0 view .LVU544
 1658 0040 0120     		movs	r0, #1
 1659              	.LVL130:
 1660              		.loc 1 1517 16 view .LVU545
 1661 0042 70E0     		b	.L132
 1662              	.LVL131:
 1663              	.L131:
1518:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1519:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1520:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/cc0fpaGl.s 			page 79


1521:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get the header */
1522:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 1664              		.loc 1 1522 5 is_stmt 1 view .LVU546
 1665              		.loc 1 1522 71 is_stmt 0 view .LVU547
 1666 0044 01F11B04 		add	r4, r1, #27
 1667 0048 2401     		lsls	r4, r4, #4
 1668 004a D0F800C0 		ldr	ip, [r0]
 1669 004e 5CF80440 		ldr	r4, [ip, r4]
 1670              		.loc 1 1522 33 view .LVU548
 1671 0052 04F00404 		and	r4, r4, #4
 1672              		.loc 1 1522 18 view .LVU549
 1673 0056 9460     		str	r4, [r2, #8]
1523:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 1674              		.loc 1 1523 5 is_stmt 1 view .LVU550
 1675              		.loc 1 1523 8 is_stmt 0 view .LVU551
 1676 0058 002C     		cmp	r4, #0
 1677 005a 66D1     		bne	.L133
1524:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1525:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
 1678              		.loc 1 1525 7 is_stmt 1 view .LVU552
 1679              		.loc 1 1525 77 is_stmt 0 view .LVU553
 1680 005c 01F11B04 		add	r4, r1, #27
 1681 0060 2401     		lsls	r4, r4, #4
 1682 0062 D0F800C0 		ldr	ip, [r0]
 1683 0066 5CF80440 		ldr	r4, [ip, r4]
 1684              		.loc 1 1525 83 view .LVU554
 1685 006a 640D     		lsrs	r4, r4, #21
 1686              		.loc 1 1525 22 view .LVU555
 1687 006c 1460     		str	r4, [r2]
 1688              	.L134:
1526:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1527:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
1528:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1529:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR)
1530:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1531:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 1689              		.loc 1 1531 5 is_stmt 1 view .LVU556
 1690              		.loc 1 1531 40 is_stmt 0 view .LVU557
 1691 006e 0468     		ldr	r4, [r0]
 1692              		.loc 1 1531 72 view .LVU558
 1693 0070 01F11B0C 		add	ip, r1, #27
 1694 0074 4FEA0C1C 		lsl	ip, ip, #4
 1695 0078 54F80C40 		ldr	r4, [r4, ip]
 1696              		.loc 1 1531 34 view .LVU559
 1697 007c 04F00204 		and	r4, r4, #2
 1698              		.loc 1 1531 18 view .LVU560
 1699 0080 D460     		str	r4, [r2, #12]
1532:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 1700              		.loc 1 1532 5 is_stmt 1 view .LVU561
 1701              		.loc 1 1532 41 is_stmt 0 view .LVU562
 1702 0082 0468     		ldr	r4, [r0]
 1703              		.loc 1 1532 73 view .LVU563
 1704 0084 6444     		add	r4, r4, ip
 1705 0086 6468     		ldr	r4, [r4, #4]
 1706              		.loc 1 1532 80 view .LVU564
 1707 0088 04F00F04 		and	r4, r4, #15
 1708              		.loc 1 1532 18 view .LVU565
ARM GAS  /tmp/cc0fpaGl.s 			page 80


 1709 008c 1461     		str	r4, [r2, #16]
1533:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1710              		.loc 1 1533 5 is_stmt 1 view .LVU566
 1711              		.loc 1 1533 54 is_stmt 0 view .LVU567
 1712 008e 0468     		ldr	r4, [r0]
 1713              		.loc 1 1533 86 view .LVU568
 1714 0090 6444     		add	r4, r4, ip
 1715 0092 6468     		ldr	r4, [r4, #4]
 1716              		.loc 1 1533 93 view .LVU569
 1717 0094 C4F30724 		ubfx	r4, r4, #8, #8
 1718              		.loc 1 1533 31 view .LVU570
 1719 0098 9461     		str	r4, [r2, #24]
1534:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1720              		.loc 1 1534 5 is_stmt 1 view .LVU571
 1721              		.loc 1 1534 48 is_stmt 0 view .LVU572
 1722 009a 0468     		ldr	r4, [r0]
 1723              		.loc 1 1534 80 view .LVU573
 1724 009c 6444     		add	r4, r4, ip
 1725 009e 6468     		ldr	r4, [r4, #4]
 1726              		.loc 1 1534 87 view .LVU574
 1727 00a0 240C     		lsrs	r4, r4, #16
 1728              		.loc 1 1534 24 view .LVU575
 1729 00a2 5461     		str	r4, [r2, #20]
1535:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1536:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get the data */
1537:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1730              		.loc 1 1537 5 is_stmt 1 view .LVU576
 1731              		.loc 1 1537 49 is_stmt 0 view .LVU577
 1732 00a4 0268     		ldr	r2, [r0]
 1733              	.LVL132:
 1734              		.loc 1 1537 81 view .LVU578
 1735 00a6 02EB0112 		add	r2, r2, r1, lsl #4
 1736 00aa D2F8B821 		ldr	r2, [r2, #440]
 1737              		.loc 1 1537 14 view .LVU579
 1738 00ae 1A70     		strb	r2, [r3]
1538:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1739              		.loc 1 1538 5 is_stmt 1 view .LVU580
 1740              		.loc 1 1538 49 is_stmt 0 view .LVU581
 1741 00b0 0268     		ldr	r2, [r0]
 1742              		.loc 1 1538 81 view .LVU582
 1743 00b2 02EB0112 		add	r2, r2, r1, lsl #4
 1744 00b6 D2F8B821 		ldr	r2, [r2, #440]
 1745              		.loc 1 1538 16 view .LVU583
 1746 00ba C2F30722 		ubfx	r2, r2, #8, #8
 1747              		.loc 1 1538 14 view .LVU584
 1748 00be 5A70     		strb	r2, [r3, #1]
1539:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1749              		.loc 1 1539 5 is_stmt 1 view .LVU585
 1750              		.loc 1 1539 49 is_stmt 0 view .LVU586
 1751 00c0 0268     		ldr	r2, [r0]
 1752              		.loc 1 1539 81 view .LVU587
 1753 00c2 02EB0112 		add	r2, r2, r1, lsl #4
 1754 00c6 D2F8B821 		ldr	r2, [r2, #440]
 1755              		.loc 1 1539 16 view .LVU588
 1756 00ca C2F30742 		ubfx	r2, r2, #16, #8
 1757              		.loc 1 1539 14 view .LVU589
 1758 00ce 9A70     		strb	r2, [r3, #2]
ARM GAS  /tmp/cc0fpaGl.s 			page 81


1540:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1759              		.loc 1 1540 5 is_stmt 1 view .LVU590
 1760              		.loc 1 1540 49 is_stmt 0 view .LVU591
 1761 00d0 0268     		ldr	r2, [r0]
 1762              		.loc 1 1540 81 view .LVU592
 1763 00d2 02EB0112 		add	r2, r2, r1, lsl #4
 1764 00d6 D2F8B821 		ldr	r2, [r2, #440]
 1765              		.loc 1 1540 16 view .LVU593
 1766 00da 120E     		lsrs	r2, r2, #24
 1767              		.loc 1 1540 14 view .LVU594
 1768 00dc DA70     		strb	r2, [r3, #3]
1541:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1769              		.loc 1 1541 5 is_stmt 1 view .LVU595
 1770              		.loc 1 1541 49 is_stmt 0 view .LVU596
 1771 00de 0268     		ldr	r2, [r0]
 1772              		.loc 1 1541 81 view .LVU597
 1773 00e0 02EB0112 		add	r2, r2, r1, lsl #4
 1774 00e4 D2F8BC21 		ldr	r2, [r2, #444]
 1775              		.loc 1 1541 14 view .LVU598
 1776 00e8 1A71     		strb	r2, [r3, #4]
1542:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1777              		.loc 1 1542 5 is_stmt 1 view .LVU599
 1778              		.loc 1 1542 49 is_stmt 0 view .LVU600
 1779 00ea 0268     		ldr	r2, [r0]
 1780              		.loc 1 1542 81 view .LVU601
 1781 00ec 02EB0112 		add	r2, r2, r1, lsl #4
 1782 00f0 D2F8BC21 		ldr	r2, [r2, #444]
 1783              		.loc 1 1542 16 view .LVU602
 1784 00f4 C2F30722 		ubfx	r2, r2, #8, #8
 1785              		.loc 1 1542 14 view .LVU603
 1786 00f8 5A71     		strb	r2, [r3, #5]
1543:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1787              		.loc 1 1543 5 is_stmt 1 view .LVU604
 1788              		.loc 1 1543 49 is_stmt 0 view .LVU605
 1789 00fa 0268     		ldr	r2, [r0]
 1790              		.loc 1 1543 81 view .LVU606
 1791 00fc 02EB0112 		add	r2, r2, r1, lsl #4
 1792 0100 D2F8BC21 		ldr	r2, [r2, #444]
 1793              		.loc 1 1543 16 view .LVU607
 1794 0104 C2F30742 		ubfx	r2, r2, #16, #8
 1795              		.loc 1 1543 14 view .LVU608
 1796 0108 9A71     		strb	r2, [r3, #6]
1544:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1797              		.loc 1 1544 5 is_stmt 1 view .LVU609
 1798              		.loc 1 1544 49 is_stmt 0 view .LVU610
 1799 010a 0268     		ldr	r2, [r0]
 1800              		.loc 1 1544 81 view .LVU611
 1801 010c 02EB0112 		add	r2, r2, r1, lsl #4
 1802 0110 D2F8BC21 		ldr	r2, [r2, #444]
 1803              		.loc 1 1544 16 view .LVU612
 1804 0114 120E     		lsrs	r2, r2, #24
 1805              		.loc 1 1544 14 view .LVU613
 1806 0116 DA71     		strb	r2, [r3, #7]
1545:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1546:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Release the FIFO */
1547:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1807              		.loc 1 1547 5 is_stmt 1 view .LVU614
ARM GAS  /tmp/cc0fpaGl.s 			page 82


 1808              		.loc 1 1547 8 is_stmt 0 view .LVU615
 1809 0118 89B9     		cbnz	r1, .L135
1548:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1549:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Release RX FIFO 0 */
1550:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 1810              		.loc 1 1550 7 is_stmt 1 view .LVU616
 1811 011a 0268     		ldr	r2, [r0]
 1812 011c D368     		ldr	r3, [r2, #12]
 1813              	.LVL133:
 1814              		.loc 1 1550 7 is_stmt 0 view .LVU617
 1815 011e 43F02003 		orr	r3, r3, #32
 1816 0122 D360     		str	r3, [r2, #12]
 1817              	.L136:
1551:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1552:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1553:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1554:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Release RX FIFO 1 */
1555:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
1556:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1557:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1558:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1559:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 1818              		.loc 1 1559 5 is_stmt 1 view .LVU618
 1819              		.loc 1 1559 12 is_stmt 0 view .LVU619
 1820 0124 0020     		movs	r0, #0
 1821              	.LVL134:
 1822              	.L132:
1560:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1561:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1562:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1563:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1564:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
1565:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1566:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
1567:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1568:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1823              		.loc 1 1568 1 view .LVU620
 1824 0126 10BC     		pop	{r4}
 1825              	.LCFI11:
 1826              		.cfi_remember_state
 1827              		.cfi_restore 4
 1828              		.cfi_def_cfa_offset 0
 1829 0128 7047     		bx	lr
 1830              	.LVL135:
 1831              	.L133:
 1832              	.LCFI12:
 1833              		.cfi_restore_state
1529:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1834              		.loc 1 1529 7 is_stmt 1 view .LVU621
1529:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1835              		.loc 1 1529 95 is_stmt 0 view .LVU622
 1836 012a 01F11B04 		add	r4, r1, #27
 1837 012e 2401     		lsls	r4, r4, #4
 1838 0130 D0F800C0 		ldr	ip, [r0]
 1839 0134 5CF80440 		ldr	r4, [ip, r4]
1529:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1840              		.loc 1 1529 101 view .LVU623
ARM GAS  /tmp/cc0fpaGl.s 			page 83


 1841 0138 E408     		lsrs	r4, r4, #3
1529:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1842              		.loc 1 1529 22 view .LVU624
 1843 013a 5460     		str	r4, [r2, #4]
 1844 013c 97E7     		b	.L134
 1845              	.LVL136:
 1846              	.L135:
1555:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1847              		.loc 1 1555 7 is_stmt 1 view .LVU625
 1848 013e 0268     		ldr	r2, [r0]
 1849 0140 1369     		ldr	r3, [r2, #16]
 1850              	.LVL137:
1555:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1851              		.loc 1 1555 7 is_stmt 0 view .LVU626
 1852 0142 43F02003 		orr	r3, r3, #32
 1853 0146 1361     		str	r3, [r2, #16]
 1854 0148 ECE7     		b	.L136
 1855              	.LVL138:
 1856              	.L129:
 1857              	.LCFI13:
 1858              		.cfi_def_cfa_offset 0
 1859              		.cfi_restore 4
1564:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1860              		.loc 1 1564 5 is_stmt 1 view .LVU627
1564:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1861              		.loc 1 1564 21 is_stmt 0 view .LVU628
 1862 014a 436A     		ldr	r3, [r0, #36]
 1863              	.LVL139:
1564:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1864              		.loc 1 1564 21 view .LVU629
 1865 014c 43F48023 		orr	r3, r3, #262144
 1866 0150 4362     		str	r3, [r0, #36]
1566:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1867              		.loc 1 1566 5 is_stmt 1 view .LVU630
1566:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1868              		.loc 1 1566 12 is_stmt 0 view .LVU631
 1869 0152 0120     		movs	r0, #1
 1870              	.LVL140:
 1871              		.loc 1 1568 1 view .LVU632
 1872 0154 7047     		bx	lr
 1873              		.cfi_endproc
 1874              	.LFE80:
 1876              		.section	.text.HAL_CAN_GetRxFifoFillLevel,"ax",%progbits
 1877              		.align	1
 1878              		.global	HAL_CAN_GetRxFifoFillLevel
 1879              		.syntax unified
 1880              		.thumb
 1881              		.thumb_func
 1883              	HAL_CAN_GetRxFifoFillLevel:
 1884              	.LVL141:
 1885              	.LFB81:
1569:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1570:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1571:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
1572:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1573:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1574:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
ARM GAS  /tmp/cc0fpaGl.s 			page 84


1575:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1576:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1577:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1578:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
1579:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1886              		.loc 1 1579 1 is_stmt 1 view -0
 1887              		.cfi_startproc
 1888              		@ args = 0, pretend = 0, frame = 0
 1889              		@ frame_needed = 0, uses_anonymous_args = 0
 1890              		@ link register save eliminated.
1580:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filllevel = 0U;
 1891              		.loc 1 1580 3 view .LVU634
1581:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1892              		.loc 1 1581 3 view .LVU635
 1893              		.loc 1 1581 24 is_stmt 0 view .LVU636
 1894 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1895              	.LVL142:
1582:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1583:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1584:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
 1896              		.loc 1 1584 3 is_stmt 1 view .LVU637
1585:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1586:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1897              		.loc 1 1586 3 view .LVU638
 1898              		.loc 1 1586 38 is_stmt 0 view .LVU639
 1899 0004 013B     		subs	r3, r3, #1
 1900              	.LVL143:
 1901              		.loc 1 1586 38 view .LVU640
 1902 0006 DBB2     		uxtb	r3, r3
 1903              		.loc 1 1586 6 view .LVU641
 1904 0008 012B     		cmp	r3, #1
 1905 000a 01D9     		bls	.L145
1580:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1906              		.loc 1 1580 12 view .LVU642
 1907 000c 0020     		movs	r0, #0
 1908              	.LVL144:
1587:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1588:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1589:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
1590:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1591:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
1592:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1593:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
1594:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1595:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
1596:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1597:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1598:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1599:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return Rx FIFO fill level */
1600:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return filllevel;
 1909              		.loc 1 1600 3 is_stmt 1 view .LVU643
1601:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1910              		.loc 1 1601 1 is_stmt 0 view .LVU644
 1911 000e 7047     		bx	lr
 1912              	.LVL145:
 1913              	.L145:
1589:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
ARM GAS  /tmp/cc0fpaGl.s 			page 85


 1914              		.loc 1 1589 5 is_stmt 1 view .LVU645
1589:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1915              		.loc 1 1589 8 is_stmt 0 view .LVU646
 1916 0010 21B9     		cbnz	r1, .L143
1591:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1917              		.loc 1 1591 7 is_stmt 1 view .LVU647
1591:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1918              		.loc 1 1591 23 is_stmt 0 view .LVU648
 1919 0012 0368     		ldr	r3, [r0]
1591:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1920              		.loc 1 1591 33 view .LVU649
 1921 0014 D868     		ldr	r0, [r3, #12]
 1922              	.LVL146:
1591:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1923              		.loc 1 1591 17 view .LVU650
 1924 0016 00F00300 		and	r0, r0, #3
 1925              	.LVL147:
1591:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1926              		.loc 1 1591 17 view .LVU651
 1927 001a 7047     		bx	lr
 1928              	.LVL148:
 1929              	.L143:
1595:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1930              		.loc 1 1595 7 is_stmt 1 view .LVU652
1595:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1931              		.loc 1 1595 23 is_stmt 0 view .LVU653
 1932 001c 0368     		ldr	r3, [r0]
1595:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1933              		.loc 1 1595 33 view .LVU654
 1934 001e 1869     		ldr	r0, [r3, #16]
 1935              	.LVL149:
1595:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1936              		.loc 1 1595 17 view .LVU655
 1937 0020 00F00300 		and	r0, r0, #3
 1938              	.LVL150:
1595:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1939              		.loc 1 1595 17 view .LVU656
 1940 0024 7047     		bx	lr
 1941              		.cfi_endproc
 1942              	.LFE81:
 1944              		.section	.text.HAL_CAN_ActivateNotification,"ax",%progbits
 1945              		.align	1
 1946              		.global	HAL_CAN_ActivateNotification
 1947              		.syntax unified
 1948              		.thumb
 1949              		.thumb_func
 1951              	HAL_CAN_ActivateNotification:
 1952              	.LVL151:
 1953              	.LFB82:
1602:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1603:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1604:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
1605:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1606:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1607:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1608:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief    Interrupts management
1609:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
ARM GAS  /tmp/cc0fpaGl.s 			page 86


1610:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
1611:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1612:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                        ##### Interrupts management #####
1613:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1614:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
1615:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1616:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1617:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1618:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1619:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
1620:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
1621:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1622:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1623:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1624:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Enable interrupts.
1625:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1626:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1627:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1628:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1629:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1630:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1631:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1632:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1954              		.loc 1 1632 1 is_stmt 1 view -0
 1955              		.cfi_startproc
 1956              		@ args = 0, pretend = 0, frame = 0
 1957              		@ frame_needed = 0, uses_anonymous_args = 0
 1958              		@ link register save eliminated.
1633:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1959              		.loc 1 1633 3 view .LVU658
 1960              		.loc 1 1633 24 is_stmt 0 view .LVU659
 1961 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1962              	.LVL152:
1634:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1635:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1636:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
 1963              		.loc 1 1636 3 is_stmt 1 view .LVU660
1637:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1638:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1964              		.loc 1 1638 3 view .LVU661
 1965              		.loc 1 1638 38 is_stmt 0 view .LVU662
 1966 0004 013B     		subs	r3, r3, #1
 1967              	.LVL153:
 1968              		.loc 1 1638 38 view .LVU663
 1969 0006 DBB2     		uxtb	r3, r3
 1970              		.loc 1 1638 6 view .LVU664
 1971 0008 012B     		cmp	r3, #1
 1972 000a 05D9     		bls	.L149
1639:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1640:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1641:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Enable the selected interrupts */
1642:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
1643:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1644:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1645:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1646:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1647:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
ARM GAS  /tmp/cc0fpaGl.s 			page 87


1648:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1649:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1650:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1973              		.loc 1 1650 5 is_stmt 1 view .LVU665
 1974              		.loc 1 1650 21 is_stmt 0 view .LVU666
 1975 000c 436A     		ldr	r3, [r0, #36]
 1976 000e 43F48023 		orr	r3, r3, #262144
 1977 0012 4362     		str	r3, [r0, #36]
1651:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1652:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1978              		.loc 1 1652 5 is_stmt 1 view .LVU667
 1979              		.loc 1 1652 12 is_stmt 0 view .LVU668
 1980 0014 0120     		movs	r0, #1
 1981              	.LVL154:
1653:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1654:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1982              		.loc 1 1654 1 view .LVU669
 1983 0016 7047     		bx	lr
 1984              	.LVL155:
 1985              	.L149:
1642:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1986              		.loc 1 1642 5 is_stmt 1 view .LVU670
 1987 0018 0268     		ldr	r2, [r0]
 1988 001a 5369     		ldr	r3, [r2, #20]
 1989 001c 1943     		orrs	r1, r1, r3
 1990              	.LVL156:
1642:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1991              		.loc 1 1642 5 is_stmt 0 view .LVU671
 1992 001e 5161     		str	r1, [r2, #20]
1645:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1993              		.loc 1 1645 5 is_stmt 1 view .LVU672
1645:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1994              		.loc 1 1645 12 is_stmt 0 view .LVU673
 1995 0020 0020     		movs	r0, #0
 1996              	.LVL157:
1645:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1997              		.loc 1 1645 12 view .LVU674
 1998 0022 7047     		bx	lr
 1999              		.cfi_endproc
 2000              	.LFE82:
 2002              		.section	.text.HAL_CAN_DeactivateNotification,"ax",%progbits
 2003              		.align	1
 2004              		.global	HAL_CAN_DeactivateNotification
 2005              		.syntax unified
 2006              		.thumb
 2007              		.thumb_func
 2009              	HAL_CAN_DeactivateNotification:
 2010              	.LVL158:
 2011              	.LFB83:
1655:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1656:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1657:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Disable interrupts.
1658:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1659:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1660:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1661:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1662:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
ARM GAS  /tmp/cc0fpaGl.s 			page 88


1663:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1664:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1665:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2012              		.loc 1 1665 1 is_stmt 1 view -0
 2013              		.cfi_startproc
 2014              		@ args = 0, pretend = 0, frame = 0
 2015              		@ frame_needed = 0, uses_anonymous_args = 0
 2016              		@ link register save eliminated.
1666:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2017              		.loc 1 1666 3 view .LVU676
 2018              		.loc 1 1666 24 is_stmt 0 view .LVU677
 2019 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2020              	.LVL159:
1667:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1668:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1669:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
 2021              		.loc 1 1669 3 is_stmt 1 view .LVU678
1670:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1671:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2022              		.loc 1 1671 3 view .LVU679
 2023              		.loc 1 1671 38 is_stmt 0 view .LVU680
 2024 0004 013B     		subs	r3, r3, #1
 2025              	.LVL160:
 2026              		.loc 1 1671 38 view .LVU681
 2027 0006 DBB2     		uxtb	r3, r3
 2028              		.loc 1 1671 6 view .LVU682
 2029 0008 012B     		cmp	r3, #1
 2030 000a 05D9     		bls	.L153
1672:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1673:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1674:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Disable the selected interrupts */
1675:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
1676:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1677:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1678:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1679:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1680:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1681:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1682:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1683:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2031              		.loc 1 1683 5 is_stmt 1 view .LVU683
 2032              		.loc 1 1683 21 is_stmt 0 view .LVU684
 2033 000c 436A     		ldr	r3, [r0, #36]
 2034 000e 43F48023 		orr	r3, r3, #262144
 2035 0012 4362     		str	r3, [r0, #36]
1684:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1685:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 2036              		.loc 1 1685 5 is_stmt 1 view .LVU685
 2037              		.loc 1 1685 12 is_stmt 0 view .LVU686
 2038 0014 0120     		movs	r0, #1
 2039              	.LVL161:
1686:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1687:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2040              		.loc 1 1687 1 view .LVU687
 2041 0016 7047     		bx	lr
 2042              	.LVL162:
 2043              	.L153:
ARM GAS  /tmp/cc0fpaGl.s 			page 89


1675:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2044              		.loc 1 1675 5 is_stmt 1 view .LVU688
 2045 0018 0268     		ldr	r2, [r0]
 2046 001a 5369     		ldr	r3, [r2, #20]
 2047 001c 23EA0101 		bic	r1, r3, r1
 2048              	.LVL163:
1675:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2049              		.loc 1 1675 5 is_stmt 0 view .LVU689
 2050 0020 5161     		str	r1, [r2, #20]
1678:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2051              		.loc 1 1678 5 is_stmt 1 view .LVU690
1678:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2052              		.loc 1 1678 12 is_stmt 0 view .LVU691
 2053 0022 0020     		movs	r0, #0
 2054              	.LVL164:
1678:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2055              		.loc 1 1678 12 view .LVU692
 2056 0024 7047     		bx	lr
 2057              		.cfi_endproc
 2058              	.LFE83:
 2060              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 2061              		.align	1
 2062              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 2063              		.syntax unified
 2064              		.thumb
 2065              		.thumb_func
 2067              	HAL_CAN_TxMailbox0CompleteCallback:
 2068              	.LVL165:
 2069              	.LFB85:
1688:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1689:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1690:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1691:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1692:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1693:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1694:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1695:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1696:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
1697:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
1698:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
1699:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
1700:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
1701:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
1702:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
1703:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
1704:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1705:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1706:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
1707:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1708:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1709:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != 0U)
1710:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1711:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1712:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
1713:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1714:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != 0U)
1715:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
ARM GAS  /tmp/cc0fpaGl.s 			page 90


1716:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
1717:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1718:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call registered callback*/
1719:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback(hcan);
1720:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1721:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1722:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
1723:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1724:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1725:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1726:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1727:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != 0U)
1728:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1729:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1730:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
1731:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1732:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != 0U)
1733:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1734:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1735:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
1736:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1737:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else
1738:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1739:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
1740:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1741:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call registered callback*/
1742:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           hcan->TxMailbox0AbortCallback(hcan);
1743:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1744:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1745:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
1746:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1747:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1748:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1749:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1750:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1751:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1752:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != 0U)
1753:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1754:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1755:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
1756:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1757:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != 0U)
1758:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1759:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1760:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1761:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call registered callback*/
1762:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback(hcan);
1763:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1764:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1765:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
1766:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1767:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1768:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1769:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1770:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != 0U)
1771:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1772:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
ARM GAS  /tmp/cc0fpaGl.s 			page 91


1773:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
1774:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1775:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != 0U)
1776:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1777:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1778:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
1779:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1780:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else
1781:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1782:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
1783:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1784:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call registered callback*/
1785:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           hcan->TxMailbox1AbortCallback(hcan);
1786:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1787:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1788:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
1789:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1790:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1791:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1792:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1793:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1794:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1795:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != 0U)
1796:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1797:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
1798:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
1799:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1800:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != 0U)
1801:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1802:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1803:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1804:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call registered callback*/
1805:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback(hcan);
1806:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1807:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1808:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
1809:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1810:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1811:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1812:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1813:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != 0U)
1814:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1815:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1816:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
1817:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1818:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != 0U)
1819:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1820:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1821:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
1822:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1823:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else
1824:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1825:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1826:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1827:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call registered callback*/
1828:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           hcan->TxMailbox2AbortCallback(hcan);
1829:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
ARM GAS  /tmp/cc0fpaGl.s 			page 92


1830:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1831:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
1832:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1833:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1834:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1835:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1836:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1837:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1838:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1839:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
1840:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1841:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
1842:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1843:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
1844:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
1845:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1846:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1847:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
1848:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1849:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1850:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1851:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1852:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
1853:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1854:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
1855:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1856:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
1857:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
1858:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1859:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1860:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1861:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1862:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->RxFifo0FullCallback(hcan);
1863:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1864:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1865:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
1866:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1867:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1868:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1869:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1870:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1871:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
1872:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1873:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check if message is still pending */
1874:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
1875:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1876:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 0 message pending Callback */
1877:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1878:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1879:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->RxFifo0MsgPendingCallback(hcan);
1880:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1881:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1882:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
1883:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1884:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1885:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1886:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/cc0fpaGl.s 			page 93


1887:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1888:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
1889:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1890:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
1891:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1892:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1893:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
1894:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1895:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
1896:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
1897:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1898:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1899:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1900:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1901:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
1902:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1903:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
1904:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1905:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1906:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
1907:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1908:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1909:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1910:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1911:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->RxFifo1FullCallback(hcan);
1912:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1913:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1914:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
1915:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1916:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1917:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1918:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1919:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
1920:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
1921:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1922:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check if message is still pending */
1923:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
1924:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1925:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 1 message pending Callback */
1926:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1927:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1928:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->RxFifo1MsgPendingCallback(hcan);
1929:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1930:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1931:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
1932:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1933:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1934:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1935:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1936:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1937:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
1938:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1939:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != 0U)
1940:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1941:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
1942:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
1943:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/cc0fpaGl.s 			page 94


1944:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Sleep Callback */
1945:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1946:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1947:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->SleepCallback(hcan);
1948:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1949:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1950:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
1951:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1952:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1953:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1954:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1955:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
1956:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != 0U)
1957:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1958:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != 0U)
1959:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1960:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear WakeUp Flag */
1961:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
1962:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1963:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* WakeUp Callback */
1964:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1965:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1966:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->WakeUpFromRxMsgCallback(hcan);
1967:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1968:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1969:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
1970:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1971:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1972:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1973:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1974:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Error interrupts management *********************************************/
1975:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != 0U)
1976:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1977:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != 0U)
1978:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1979:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Error Warning Flag */
1980:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
1981:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
1982:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1983:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Error Warning */
1984:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
1985:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1986:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
1987:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1988:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1989:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Error Passive Flag */
1990:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
1991:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
1992:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1993:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Error Passive */
1994:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
1995:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1996:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
1997:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1998:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1999:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Bus-off Flag */
2000:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
ARM GAS  /tmp/cc0fpaGl.s 			page 95


2001:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
2002:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
2003:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
2004:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
2005:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2006:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
2007:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
2008:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2009:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Last Error Code Flag */
2010:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
2011:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
2012:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
2013:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
2014:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
2015:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_0):
2016:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Stuff error */
2017:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
2018:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2019:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1):
2020:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Form error */
2021:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
2022:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2023:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
2024:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
2025:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
2026:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2027:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2):
2028:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
2029:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
2030:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2031:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
2032:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
2033:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
2034:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2035:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
2036:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to CRC error */
2037:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
2038:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2039:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           default:
2040:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2041:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
2042:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2043:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Clear Last error code Flag */
2044:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
2045:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
2046:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
2047:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2048:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Clear ERRI Flag */
2049:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
2050:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
2051:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2052:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
2053:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
2054:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
2055:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code in handle */
2056:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
2057:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/cc0fpaGl.s 			page 96


2058:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Call Error callback function */
2059:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
2060:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Call registered callback*/
2061:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCallback(hcan);
2062:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
2063:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Call weak (surcharged) callback */
2064:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
2065:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
2066:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
2067:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
2068:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2069:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2070:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
2071:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2072:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2073:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
2074:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief   CAN Callback functions
2075:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
2076:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
2077:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
2078:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                           ##### Callback functions #####
2079:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
2080:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
2081:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     This subsection provides the following callback functions:
2082:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
2083:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
2084:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
2085:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
2086:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
2087:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
2088:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
2089:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
2090:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
2091:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
2092:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
2093:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
2094:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
2095:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2096:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
2097:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
2098:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2099:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2100:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2101:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
2102:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2103:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2104:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2105:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2106:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
2107:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2070              		.loc 1 2107 1 is_stmt 1 view -0
 2071              		.cfi_startproc
 2072              		@ args = 0, pretend = 0, frame = 0
 2073              		@ frame_needed = 0, uses_anonymous_args = 0
 2074              		@ link register save eliminated.
2108:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2109:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
ARM GAS  /tmp/cc0fpaGl.s 			page 97


 2075              		.loc 1 2109 3 view .LVU694
2110:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2111:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2112:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
2113:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2114:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2115:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2076              		.loc 1 2115 1 is_stmt 0 view .LVU695
 2077 0000 7047     		bx	lr
 2078              		.cfi_endproc
 2079              	.LFE85:
 2081              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 2082              		.align	1
 2083              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 2084              		.syntax unified
 2085              		.thumb
 2086              		.thumb_func
 2088              	HAL_CAN_TxMailbox1CompleteCallback:
 2089              	.LVL166:
 2090              	.LFB86:
2116:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2117:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2118:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
2119:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2120:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2121:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2122:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2123:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
2124:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2091              		.loc 1 2124 1 is_stmt 1 view -0
 2092              		.cfi_startproc
 2093              		@ args = 0, pretend = 0, frame = 0
 2094              		@ frame_needed = 0, uses_anonymous_args = 0
 2095              		@ link register save eliminated.
2125:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2126:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2096              		.loc 1 2126 3 view .LVU697
2127:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2128:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2129:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
2130:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2131:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2132:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2097              		.loc 1 2132 1 is_stmt 0 view .LVU698
 2098 0000 7047     		bx	lr
 2099              		.cfi_endproc
 2100              	.LFE86:
 2102              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 2103              		.align	1
 2104              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 2105              		.syntax unified
 2106              		.thumb
 2107              		.thumb_func
 2109              	HAL_CAN_TxMailbox2CompleteCallback:
 2110              	.LVL167:
 2111              	.LFB87:
2133:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/cc0fpaGl.s 			page 98


2134:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2135:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
2136:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2137:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2138:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2139:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2140:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
2141:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2112              		.loc 1 2141 1 is_stmt 1 view -0
 2113              		.cfi_startproc
 2114              		@ args = 0, pretend = 0, frame = 0
 2115              		@ frame_needed = 0, uses_anonymous_args = 0
 2116              		@ link register save eliminated.
2142:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2143:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2117              		.loc 1 2143 3 view .LVU700
2144:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2145:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2146:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
2147:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2148:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2149:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2118              		.loc 1 2149 1 is_stmt 0 view .LVU701
 2119 0000 7047     		bx	lr
 2120              		.cfi_endproc
 2121              	.LFE87:
 2123              		.section	.text.HAL_CAN_TxMailbox0AbortCallback,"ax",%progbits
 2124              		.align	1
 2125              		.weak	HAL_CAN_TxMailbox0AbortCallback
 2126              		.syntax unified
 2127              		.thumb
 2128              		.thumb_func
 2130              	HAL_CAN_TxMailbox0AbortCallback:
 2131              	.LVL168:
 2132              	.LFB88:
2150:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2151:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2152:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
2153:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2154:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2155:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2156:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2157:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
2158:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2133              		.loc 1 2158 1 is_stmt 1 view -0
 2134              		.cfi_startproc
 2135              		@ args = 0, pretend = 0, frame = 0
 2136              		@ frame_needed = 0, uses_anonymous_args = 0
 2137              		@ link register save eliminated.
2159:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2160:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2138              		.loc 1 2160 3 view .LVU703
2161:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2162:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2163:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
2164:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2165:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
ARM GAS  /tmp/cc0fpaGl.s 			page 99


2166:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2139              		.loc 1 2166 1 is_stmt 0 view .LVU704
 2140 0000 7047     		bx	lr
 2141              		.cfi_endproc
 2142              	.LFE88:
 2144              		.section	.text.HAL_CAN_TxMailbox1AbortCallback,"ax",%progbits
 2145              		.align	1
 2146              		.weak	HAL_CAN_TxMailbox1AbortCallback
 2147              		.syntax unified
 2148              		.thumb
 2149              		.thumb_func
 2151              	HAL_CAN_TxMailbox1AbortCallback:
 2152              	.LVL169:
 2153              	.LFB89:
2167:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2168:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2169:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
2170:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2171:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2172:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2173:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2174:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
2175:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2154              		.loc 1 2175 1 is_stmt 1 view -0
 2155              		.cfi_startproc
 2156              		@ args = 0, pretend = 0, frame = 0
 2157              		@ frame_needed = 0, uses_anonymous_args = 0
 2158              		@ link register save eliminated.
2176:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2177:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2159              		.loc 1 2177 3 view .LVU706
2178:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2179:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2180:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
2181:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2182:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2183:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2160              		.loc 1 2183 1 is_stmt 0 view .LVU707
 2161 0000 7047     		bx	lr
 2162              		.cfi_endproc
 2163              	.LFE89:
 2165              		.section	.text.HAL_CAN_TxMailbox2AbortCallback,"ax",%progbits
 2166              		.align	1
 2167              		.weak	HAL_CAN_TxMailbox2AbortCallback
 2168              		.syntax unified
 2169              		.thumb
 2170              		.thumb_func
 2172              	HAL_CAN_TxMailbox2AbortCallback:
 2173              	.LVL170:
 2174              	.LFB90:
2184:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2185:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2186:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
2187:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2188:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2189:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2190:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
ARM GAS  /tmp/cc0fpaGl.s 			page 100


2191:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
2192:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2175              		.loc 1 2192 1 is_stmt 1 view -0
 2176              		.cfi_startproc
 2177              		@ args = 0, pretend = 0, frame = 0
 2178              		@ frame_needed = 0, uses_anonymous_args = 0
 2179              		@ link register save eliminated.
2193:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2194:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2180              		.loc 1 2194 3 view .LVU709
2195:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2196:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2197:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
2198:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2199:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2200:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2181              		.loc 1 2200 1 is_stmt 0 view .LVU710
 2182 0000 7047     		bx	lr
 2183              		.cfi_endproc
 2184              	.LFE90:
 2186              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 2187              		.align	1
 2188              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 2189              		.syntax unified
 2190              		.thumb
 2191              		.thumb_func
 2193              	HAL_CAN_RxFifo0MsgPendingCallback:
 2194              	.LVL171:
 2195              	.LFB91:
2201:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2202:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2203:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
2204:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2205:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2206:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2207:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2208:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
2209:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2196              		.loc 1 2209 1 is_stmt 1 view -0
 2197              		.cfi_startproc
 2198              		@ args = 0, pretend = 0, frame = 0
 2199              		@ frame_needed = 0, uses_anonymous_args = 0
 2200              		@ link register save eliminated.
2210:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2211:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2201              		.loc 1 2211 3 view .LVU712
2212:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2213:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2214:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
2215:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2216:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2217:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2202              		.loc 1 2217 1 is_stmt 0 view .LVU713
 2203 0000 7047     		bx	lr
 2204              		.cfi_endproc
 2205              	.LFE91:
 2207              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
ARM GAS  /tmp/cc0fpaGl.s 			page 101


 2208              		.align	1
 2209              		.weak	HAL_CAN_RxFifo0FullCallback
 2210              		.syntax unified
 2211              		.thumb
 2212              		.thumb_func
 2214              	HAL_CAN_RxFifo0FullCallback:
 2215              	.LVL172:
 2216              	.LFB92:
2218:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2219:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2220:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
2221:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2222:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2223:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2224:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2225:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
2226:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2217              		.loc 1 2226 1 is_stmt 1 view -0
 2218              		.cfi_startproc
 2219              		@ args = 0, pretend = 0, frame = 0
 2220              		@ frame_needed = 0, uses_anonymous_args = 0
 2221              		@ link register save eliminated.
2227:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2228:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2222              		.loc 1 2228 3 view .LVU715
2229:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2230:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2231:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
2232:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             file
2233:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2234:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2223              		.loc 1 2234 1 is_stmt 0 view .LVU716
 2224 0000 7047     		bx	lr
 2225              		.cfi_endproc
 2226              	.LFE92:
 2228              		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 2229              		.align	1
 2230              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 2231              		.syntax unified
 2232              		.thumb
 2233              		.thumb_func
 2235              	HAL_CAN_RxFifo1MsgPendingCallback:
 2236              	.LVL173:
 2237              	.LFB93:
2235:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2236:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2237:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
2238:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2239:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2240:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2241:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2242:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
2243:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2238              		.loc 1 2243 1 is_stmt 1 view -0
 2239              		.cfi_startproc
 2240              		@ args = 0, pretend = 0, frame = 0
 2241              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc0fpaGl.s 			page 102


 2242              		@ link register save eliminated.
2244:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2245:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2243              		.loc 1 2245 3 view .LVU718
2246:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2247:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2248:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
2249:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2250:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2251:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2244              		.loc 1 2251 1 is_stmt 0 view .LVU719
 2245 0000 7047     		bx	lr
 2246              		.cfi_endproc
 2247              	.LFE93:
 2249              		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 2250              		.align	1
 2251              		.weak	HAL_CAN_RxFifo1FullCallback
 2252              		.syntax unified
 2253              		.thumb
 2254              		.thumb_func
 2256              	HAL_CAN_RxFifo1FullCallback:
 2257              	.LVL174:
 2258              	.LFB94:
2252:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2253:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2254:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
2255:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2256:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2257:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2258:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2259:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
2260:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2259              		.loc 1 2260 1 is_stmt 1 view -0
 2260              		.cfi_startproc
 2261              		@ args = 0, pretend = 0, frame = 0
 2262              		@ frame_needed = 0, uses_anonymous_args = 0
 2263              		@ link register save eliminated.
2261:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2262:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2264              		.loc 1 2262 3 view .LVU721
2263:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2264:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2265:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
2266:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             file
2267:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2268:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2265              		.loc 1 2268 1 is_stmt 0 view .LVU722
 2266 0000 7047     		bx	lr
 2267              		.cfi_endproc
 2268              	.LFE94:
 2270              		.section	.text.HAL_CAN_SleepCallback,"ax",%progbits
 2271              		.align	1
 2272              		.weak	HAL_CAN_SleepCallback
 2273              		.syntax unified
 2274              		.thumb
 2275              		.thumb_func
 2277              	HAL_CAN_SleepCallback:
ARM GAS  /tmp/cc0fpaGl.s 			page 103


 2278              	.LVL175:
 2279              	.LFB95:
2269:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2270:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2271:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Sleep callback.
2272:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2273:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2274:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2275:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2276:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
2277:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2280              		.loc 1 2277 1 is_stmt 1 view -0
 2281              		.cfi_startproc
 2282              		@ args = 0, pretend = 0, frame = 0
 2283              		@ frame_needed = 0, uses_anonymous_args = 0
 2284              		@ link register save eliminated.
2278:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2279:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2285              		.loc 1 2279 3 view .LVU724
2280:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2281:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2282:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
2283:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2284:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2286              		.loc 1 2284 1 is_stmt 0 view .LVU725
 2287 0000 7047     		bx	lr
 2288              		.cfi_endproc
 2289              	.LFE95:
 2291              		.section	.text.HAL_CAN_WakeUpFromRxMsgCallback,"ax",%progbits
 2292              		.align	1
 2293              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 2294              		.syntax unified
 2295              		.thumb
 2296              		.thumb_func
 2298              	HAL_CAN_WakeUpFromRxMsgCallback:
 2299              	.LVL176:
 2300              	.LFB96:
2285:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2286:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2287:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
2288:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2289:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2290:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2291:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2292:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
2293:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2301              		.loc 1 2293 1 is_stmt 1 view -0
 2302              		.cfi_startproc
 2303              		@ args = 0, pretend = 0, frame = 0
 2304              		@ frame_needed = 0, uses_anonymous_args = 0
 2305              		@ link register save eliminated.
2294:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2295:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2306              		.loc 1 2295 3 view .LVU727
2296:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2297:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2298:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
ARM GAS  /tmp/cc0fpaGl.s 			page 104


2299:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2300:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2301:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2307              		.loc 1 2301 1 is_stmt 0 view .LVU728
 2308 0000 7047     		bx	lr
 2309              		.cfi_endproc
 2310              	.LFE96:
 2312              		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 2313              		.align	1
 2314              		.weak	HAL_CAN_ErrorCallback
 2315              		.syntax unified
 2316              		.thumb
 2317              		.thumb_func
 2319              	HAL_CAN_ErrorCallback:
 2320              	.LVL177:
 2321              	.LFB97:
2302:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2303:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2304:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Error CAN callback.
2305:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2306:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2307:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2308:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2309:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
2310:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2322              		.loc 1 2310 1 is_stmt 1 view -0
 2323              		.cfi_startproc
 2324              		@ args = 0, pretend = 0, frame = 0
 2325              		@ frame_needed = 0, uses_anonymous_args = 0
 2326              		@ link register save eliminated.
2311:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2312:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2327              		.loc 1 2312 3 view .LVU730
2313:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2314:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2315:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
2316:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2317:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2328              		.loc 1 2317 1 is_stmt 0 view .LVU731
 2329 0000 7047     		bx	lr
 2330              		.cfi_endproc
 2331              	.LFE97:
 2333              		.section	.text.HAL_CAN_IRQHandler,"ax",%progbits
 2334              		.align	1
 2335              		.global	HAL_CAN_IRQHandler
 2336              		.syntax unified
 2337              		.thumb
 2338              		.thumb_func
 2340              	HAL_CAN_IRQHandler:
 2341              	.LVL178:
 2342              	.LFB84:
1696:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2343              		.loc 1 1696 1 is_stmt 1 view -0
 2344              		.cfi_startproc
 2345              		@ args = 0, pretend = 0, frame = 0
 2346              		@ frame_needed = 0, uses_anonymous_args = 0
1696:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
ARM GAS  /tmp/cc0fpaGl.s 			page 105


 2347              		.loc 1 1696 1 is_stmt 0 view .LVU733
 2348 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2349              	.LCFI14:
 2350              		.cfi_def_cfa_offset 40
 2351              		.cfi_offset 3, -40
 2352              		.cfi_offset 4, -36
 2353              		.cfi_offset 5, -32
 2354              		.cfi_offset 6, -28
 2355              		.cfi_offset 7, -24
 2356              		.cfi_offset 8, -20
 2357              		.cfi_offset 9, -16
 2358              		.cfi_offset 10, -12
 2359              		.cfi_offset 11, -8
 2360              		.cfi_offset 14, -4
 2361 0004 0546     		mov	r5, r0
1697:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2362              		.loc 1 1697 3 is_stmt 1 view .LVU734
 2363              	.LVL179:
1698:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2364              		.loc 1 1698 3 view .LVU735
1698:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2365              		.loc 1 1698 25 is_stmt 0 view .LVU736
 2366 0006 0368     		ldr	r3, [r0]
1698:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2367              		.loc 1 1698 12 view .LVU737
 2368 0008 5C69     		ldr	r4, [r3, #20]
 2369              	.LVL180:
1699:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2370              		.loc 1 1699 3 is_stmt 1 view .LVU738
1699:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2371              		.loc 1 1699 12 is_stmt 0 view .LVU739
 2372 000a D3F80480 		ldr	r8, [r3, #4]
 2373              	.LVL181:
1700:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 2374              		.loc 1 1700 3 is_stmt 1 view .LVU740
1700:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 2375              		.loc 1 1700 12 is_stmt 0 view .LVU741
 2376 000e 9F68     		ldr	r7, [r3, #8]
 2377              	.LVL182:
1701:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2378              		.loc 1 1701 3 is_stmt 1 view .LVU742
1701:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2379              		.loc 1 1701 12 is_stmt 0 view .LVU743
 2380 0010 D3F80CB0 		ldr	fp, [r3, #12]
 2381              	.LVL183:
1702:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2382              		.loc 1 1702 3 is_stmt 1 view .LVU744
1702:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2383              		.loc 1 1702 12 is_stmt 0 view .LVU745
 2384 0014 D3F810A0 		ldr	r10, [r3, #16]
 2385              	.LVL184:
1703:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2386              		.loc 1 1703 3 is_stmt 1 view .LVU746
1703:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2387              		.loc 1 1703 12 is_stmt 0 view .LVU747
 2388 0018 D3F81890 		ldr	r9, [r3, #24]
 2389              	.LVL185:
ARM GAS  /tmp/cc0fpaGl.s 			page 106


1706:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2390              		.loc 1 1706 3 is_stmt 1 view .LVU748
1706:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2391              		.loc 1 1706 6 is_stmt 0 view .LVU749
 2392 001c 14F00106 		ands	r6, r4, #1
 2393 0020 3BD0     		beq	.L168
1709:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2394              		.loc 1 1709 5 is_stmt 1 view .LVU750
1709:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2395              		.loc 1 1709 8 is_stmt 0 view .LVU751
 2396 0022 17F00106 		ands	r6, r7, #1
 2397 0026 16D0     		beq	.L169
1712:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2398              		.loc 1 1712 7 is_stmt 1 view .LVU752
 2399 0028 0122     		movs	r2, #1
 2400 002a 9A60     		str	r2, [r3, #8]
1714:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2401              		.loc 1 1714 7 view .LVU753
1714:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2402              		.loc 1 1714 10 is_stmt 0 view .LVU754
 2403 002c 17F0020F 		tst	r7, #2
 2404 0030 08D1     		bne	.L203
1727:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2405              		.loc 1 1727 9 is_stmt 1 view .LVU755
1727:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2406              		.loc 1 1727 12 is_stmt 0 view .LVU756
 2407 0032 17F0040F 		tst	r7, #4
 2408 0036 0CD1     		bne	.L200
1732:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2409              		.loc 1 1732 14 is_stmt 1 view .LVU757
1732:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2410              		.loc 1 1732 17 is_stmt 0 view .LVU758
 2411 0038 17F00806 		ands	r6, r7, #8
 2412 003c 06D0     		beq	.L204
1735:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2413              		.loc 1 1735 21 view .LVU759
 2414 003e 4FF48056 		mov	r6, #4096
 2415 0042 08E0     		b	.L169
 2416              	.L203:
1722:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2417              		.loc 1 1722 9 is_stmt 1 view .LVU760
 2418 0044 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback
 2419              	.LVL186:
1697:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2420              		.loc 1 1697 12 is_stmt 0 view .LVU761
 2421 0048 0026     		movs	r6, #0
 2422 004a 04E0     		b	.L169
 2423              	.LVL187:
 2424              	.L204:
1745:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2425              		.loc 1 1745 11 is_stmt 1 view .LVU762
 2426 004c FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback
 2427              	.LVL188:
1745:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2428              		.loc 1 1745 11 is_stmt 0 view .LVU763
 2429 0050 01E0     		b	.L169
 2430              	.LVL189:
ARM GAS  /tmp/cc0fpaGl.s 			page 107


 2431              	.L200:
1730:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2432              		.loc 1 1730 21 view .LVU764
 2433 0052 4FF40066 		mov	r6, #2048
 2434              	.LVL190:
 2435              	.L169:
1752:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2436              		.loc 1 1752 5 is_stmt 1 view .LVU765
1752:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2437              		.loc 1 1752 8 is_stmt 0 view .LVU766
 2438 0056 17F4807F 		tst	r7, #256
 2439 005a 0DD0     		beq	.L171
1755:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2440              		.loc 1 1755 7 is_stmt 1 view .LVU767
 2441 005c 2B68     		ldr	r3, [r5]
 2442 005e 4FF48072 		mov	r2, #256
 2443 0062 9A60     		str	r2, [r3, #8]
1757:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2444              		.loc 1 1757 7 view .LVU768
1757:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2445              		.loc 1 1757 10 is_stmt 0 view .LVU769
 2446 0064 17F4007F 		tst	r7, #512
 2447 0068 40F08680 		bne	.L205
1770:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2448              		.loc 1 1770 9 is_stmt 1 view .LVU770
1770:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2449              		.loc 1 1770 12 is_stmt 0 view .LVU771
 2450 006c 17F4806F 		tst	r7, #1024
 2451 0070 00F08680 		beq	.L173
1773:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2452              		.loc 1 1773 11 is_stmt 1 view .LVU772
1773:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2453              		.loc 1 1773 21 is_stmt 0 view .LVU773
 2454 0074 46F40056 		orr	r6, r6, #8192
 2455              	.LVL191:
 2456              	.L171:
1795:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2457              		.loc 1 1795 5 is_stmt 1 view .LVU774
1795:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2458              		.loc 1 1795 8 is_stmt 0 view .LVU775
 2459 0078 17F4803F 		tst	r7, #65536
 2460 007c 0DD0     		beq	.L168
1798:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2461              		.loc 1 1798 7 is_stmt 1 view .LVU776
 2462 007e 2B68     		ldr	r3, [r5]
 2463 0080 4FF48032 		mov	r2, #65536
 2464 0084 9A60     		str	r2, [r3, #8]
1800:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2465              		.loc 1 1800 7 view .LVU777
1800:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2466              		.loc 1 1800 10 is_stmt 0 view .LVU778
 2467 0086 17F4003F 		tst	r7, #131072
 2468 008a 40F08380 		bne	.L206
1813:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2469              		.loc 1 1813 9 is_stmt 1 view .LVU779
1813:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2470              		.loc 1 1813 12 is_stmt 0 view .LVU780
ARM GAS  /tmp/cc0fpaGl.s 			page 108


 2471 008e 17F4802F 		tst	r7, #262144
 2472 0092 00F08380 		beq	.L176
1816:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2473              		.loc 1 1816 11 is_stmt 1 view .LVU781
1816:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2474              		.loc 1 1816 21 is_stmt 0 view .LVU782
 2475 0096 46F40046 		orr	r6, r6, #32768
 2476              	.LVL192:
 2477              	.L168:
1839:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2478              		.loc 1 1839 3 is_stmt 1 view .LVU783
1839:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2479              		.loc 1 1839 6 is_stmt 0 view .LVU784
 2480 009a 14F0080F 		tst	r4, #8
 2481 009e 07D0     		beq	.L178
1841:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2482              		.loc 1 1841 5 is_stmt 1 view .LVU785
1841:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2483              		.loc 1 1841 8 is_stmt 0 view .LVU786
 2484 00a0 1BF0100F 		tst	fp, #16
 2485 00a4 04D0     		beq	.L178
1844:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2486              		.loc 1 1844 7 is_stmt 1 view .LVU787
1844:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2487              		.loc 1 1844 17 is_stmt 0 view .LVU788
 2488 00a6 46F40076 		orr	r6, r6, #512
 2489              	.LVL193:
1847:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2490              		.loc 1 1847 7 is_stmt 1 view .LVU789
 2491 00aa 2B68     		ldr	r3, [r5]
 2492 00ac 1022     		movs	r2, #16
 2493 00ae DA60     		str	r2, [r3, #12]
 2494              	.L178:
1852:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2495              		.loc 1 1852 3 view .LVU790
1852:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2496              		.loc 1 1852 6 is_stmt 0 view .LVU791
 2497 00b0 14F0040F 		tst	r4, #4
 2498 00b4 02D0     		beq	.L179
1854:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2499              		.loc 1 1854 5 is_stmt 1 view .LVU792
1854:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2500              		.loc 1 1854 8 is_stmt 0 view .LVU793
 2501 00b6 1BF0080F 		tst	fp, #8
 2502 00ba 79D1     		bne	.L207
 2503              	.L179:
1871:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2504              		.loc 1 1871 3 is_stmt 1 view .LVU794
1871:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2505              		.loc 1 1871 6 is_stmt 0 view .LVU795
 2506 00bc 14F0020F 		tst	r4, #2
 2507 00c0 04D0     		beq	.L180
1874:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2508              		.loc 1 1874 5 is_stmt 1 view .LVU796
1874:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2509              		.loc 1 1874 14 is_stmt 0 view .LVU797
 2510 00c2 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/cc0fpaGl.s 			page 109


1874:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2511              		.loc 1 1874 24 view .LVU798
 2512 00c4 DB68     		ldr	r3, [r3, #12]
1874:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2513              		.loc 1 1874 8 view .LVU799
 2514 00c6 13F0030F 		tst	r3, #3
 2515 00ca 78D1     		bne	.L208
 2516              	.L180:
1888:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2517              		.loc 1 1888 3 is_stmt 1 view .LVU800
1888:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2518              		.loc 1 1888 6 is_stmt 0 view .LVU801
 2519 00cc 14F0400F 		tst	r4, #64
 2520 00d0 07D0     		beq	.L181
1890:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2521              		.loc 1 1890 5 is_stmt 1 view .LVU802
1890:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2522              		.loc 1 1890 8 is_stmt 0 view .LVU803
 2523 00d2 1AF0100F 		tst	r10, #16
 2524 00d6 04D0     		beq	.L181
1893:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2525              		.loc 1 1893 7 is_stmt 1 view .LVU804
1893:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2526              		.loc 1 1893 17 is_stmt 0 view .LVU805
 2527 00d8 46F48066 		orr	r6, r6, #1024
 2528              	.LVL194:
1896:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2529              		.loc 1 1896 7 is_stmt 1 view .LVU806
 2530 00dc 2B68     		ldr	r3, [r5]
 2531 00de 1022     		movs	r2, #16
 2532 00e0 1A61     		str	r2, [r3, #16]
 2533              	.L181:
1901:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2534              		.loc 1 1901 3 view .LVU807
1901:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2535              		.loc 1 1901 6 is_stmt 0 view .LVU808
 2536 00e2 14F0200F 		tst	r4, #32
 2537 00e6 02D0     		beq	.L182
1903:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2538              		.loc 1 1903 5 is_stmt 1 view .LVU809
1903:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2539              		.loc 1 1903 8 is_stmt 0 view .LVU810
 2540 00e8 1AF0080F 		tst	r10, #8
 2541 00ec 6BD1     		bne	.L209
 2542              	.L182:
1920:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2543              		.loc 1 1920 3 is_stmt 1 view .LVU811
1920:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2544              		.loc 1 1920 6 is_stmt 0 view .LVU812
 2545 00ee 14F0100F 		tst	r4, #16
 2546 00f2 04D0     		beq	.L183
1923:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2547              		.loc 1 1923 5 is_stmt 1 view .LVU813
1923:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2548              		.loc 1 1923 14 is_stmt 0 view .LVU814
 2549 00f4 2B68     		ldr	r3, [r5]
1923:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
ARM GAS  /tmp/cc0fpaGl.s 			page 110


 2550              		.loc 1 1923 24 view .LVU815
 2551 00f6 1B69     		ldr	r3, [r3, #16]
1923:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2552              		.loc 1 1923 8 view .LVU816
 2553 00f8 13F0030F 		tst	r3, #3
 2554 00fc 6AD1     		bne	.L210
 2555              	.L183:
1937:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2556              		.loc 1 1937 3 is_stmt 1 view .LVU817
1937:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2557              		.loc 1 1937 6 is_stmt 0 view .LVU818
 2558 00fe 14F4003F 		tst	r4, #131072
 2559 0102 02D0     		beq	.L184
1939:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2560              		.loc 1 1939 5 is_stmt 1 view .LVU819
1939:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2561              		.loc 1 1939 8 is_stmt 0 view .LVU820
 2562 0104 18F0100F 		tst	r8, #16
 2563 0108 68D1     		bne	.L211
 2564              	.L184:
1956:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2565              		.loc 1 1956 3 is_stmt 1 view .LVU821
1956:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2566              		.loc 1 1956 6 is_stmt 0 view .LVU822
 2567 010a 14F4803F 		tst	r4, #65536
 2568 010e 02D0     		beq	.L185
1958:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2569              		.loc 1 1958 5 is_stmt 1 view .LVU823
1958:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2570              		.loc 1 1958 8 is_stmt 0 view .LVU824
 2571 0110 18F0080F 		tst	r8, #8
 2572 0114 69D1     		bne	.L212
 2573              	.L185:
1975:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2574              		.loc 1 1975 3 is_stmt 1 view .LVU825
1975:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2575              		.loc 1 1975 6 is_stmt 0 view .LVU826
 2576 0116 14F4004F 		tst	r4, #32768
 2577 011a 7AD0     		beq	.L186
1977:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2578              		.loc 1 1977 5 is_stmt 1 view .LVU827
1977:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2579              		.loc 1 1977 8 is_stmt 0 view .LVU828
 2580 011c 18F0040F 		tst	r8, #4
 2581 0120 74D0     		beq	.L187
1980:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2582              		.loc 1 1980 7 is_stmt 1 view .LVU829
1980:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2583              		.loc 1 1980 10 is_stmt 0 view .LVU830
 2584 0122 14F4807F 		tst	r4, #256
 2585 0126 04D0     		beq	.L188
1980:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2586              		.loc 1 1980 55 discriminator 1 view .LVU831
 2587 0128 19F0010F 		tst	r9, #1
 2588 012c 01D0     		beq	.L188
1984:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2589              		.loc 1 1984 9 is_stmt 1 view .LVU832
ARM GAS  /tmp/cc0fpaGl.s 			page 111


1984:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2590              		.loc 1 1984 19 is_stmt 0 view .LVU833
 2591 012e 46F00106 		orr	r6, r6, #1
 2592              	.LVL195:
 2593              	.L188:
1990:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2594              		.loc 1 1990 7 is_stmt 1 view .LVU834
1990:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2595              		.loc 1 1990 10 is_stmt 0 view .LVU835
 2596 0132 14F4007F 		tst	r4, #512
 2597 0136 04D0     		beq	.L189
1990:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2598              		.loc 1 1990 55 discriminator 1 view .LVU836
 2599 0138 19F0020F 		tst	r9, #2
 2600 013c 01D0     		beq	.L189
1994:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2601              		.loc 1 1994 9 is_stmt 1 view .LVU837
1994:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2602              		.loc 1 1994 19 is_stmt 0 view .LVU838
 2603 013e 46F00206 		orr	r6, r6, #2
 2604              	.LVL196:
 2605              	.L189:
2000:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2606              		.loc 1 2000 7 is_stmt 1 view .LVU839
2000:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2607              		.loc 1 2000 10 is_stmt 0 view .LVU840
 2608 0142 14F4806F 		tst	r4, #1024
 2609 0146 04D0     		beq	.L190
2000:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2610              		.loc 1 2000 48 discriminator 1 view .LVU841
 2611 0148 19F0040F 		tst	r9, #4
 2612 014c 01D0     		beq	.L190
2004:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2613              		.loc 1 2004 9 is_stmt 1 view .LVU842
2004:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2614              		.loc 1 2004 19 is_stmt 0 view .LVU843
 2615 014e 46F00406 		orr	r6, r6, #4
 2616              	.LVL197:
 2617              	.L190:
2010:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2618              		.loc 1 2010 7 is_stmt 1 view .LVU844
2010:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2619              		.loc 1 2010 10 is_stmt 0 view .LVU845
 2620 0152 14F4006F 		tst	r4, #2048
 2621 0156 59D0     		beq	.L187
2010:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2622              		.loc 1 2010 57 discriminator 1 view .LVU846
 2623 0158 19F07009 		ands	r9, r9, #112
 2624              	.LVL198:
2010:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2625              		.loc 1 2010 57 discriminator 1 view .LVU847
 2626 015c 56D0     		beq	.L187
2013:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2627              		.loc 1 2013 9 is_stmt 1 view .LVU848
 2628 015e B9F1400F 		cmp	r9, #64
 2629 0162 65D0     		beq	.L191
 2630 0164 58D8     		bhi	.L192
ARM GAS  /tmp/cc0fpaGl.s 			page 112


 2631 0166 B9F1200F 		cmp	r9, #32
 2632 016a 5ED0     		beq	.L193
 2633 016c B9F1300F 		cmp	r9, #48
 2634 0170 42D1     		bne	.L213
2025:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2635              		.loc 1 2025 13 view .LVU849
2025:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2636              		.loc 1 2025 23 is_stmt 0 view .LVU850
 2637 0172 46F02006 		orr	r6, r6, #32
 2638              	.LVL199:
2026:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 2639              		.loc 1 2026 13 is_stmt 1 view .LVU851
 2640 0176 44E0     		b	.L196
 2641              	.LVL200:
 2642              	.L205:
1765:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2643              		.loc 1 1765 9 view .LVU852
 2644 0178 2846     		mov	r0, r5
 2645 017a FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback
 2646              	.LVL201:
 2647 017e 7BE7     		b	.L171
 2648              	.L173:
1775:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2649              		.loc 1 1775 14 view .LVU853
1775:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2650              		.loc 1 1775 17 is_stmt 0 view .LVU854
 2651 0180 17F4006F 		tst	r7, #2048
 2652 0184 02D0     		beq	.L174
1778:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2653              		.loc 1 1778 11 is_stmt 1 view .LVU855
1778:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2654              		.loc 1 1778 21 is_stmt 0 view .LVU856
 2655 0186 46F48046 		orr	r6, r6, #16384
 2656              	.LVL202:
1778:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2657              		.loc 1 1778 21 view .LVU857
 2658 018a 75E7     		b	.L171
 2659              	.L174:
1788:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2660              		.loc 1 1788 11 is_stmt 1 view .LVU858
 2661 018c 2846     		mov	r0, r5
 2662 018e FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback
 2663              	.LVL203:
 2664 0192 71E7     		b	.L171
 2665              	.L206:
1808:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2666              		.loc 1 1808 9 view .LVU859
 2667 0194 2846     		mov	r0, r5
 2668 0196 FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback
 2669              	.LVL204:
 2670 019a 7EE7     		b	.L168
 2671              	.L176:
1818:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2672              		.loc 1 1818 14 view .LVU860
1818:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2673              		.loc 1 1818 17 is_stmt 0 view .LVU861
 2674 019c 17F4002F 		tst	r7, #524288
ARM GAS  /tmp/cc0fpaGl.s 			page 113


 2675 01a0 02D0     		beq	.L177
1821:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2676              		.loc 1 1821 11 is_stmt 1 view .LVU862
1821:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2677              		.loc 1 1821 21 is_stmt 0 view .LVU863
 2678 01a2 46F48036 		orr	r6, r6, #65536
 2679              	.LVL205:
1821:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2680              		.loc 1 1821 21 view .LVU864
 2681 01a6 78E7     		b	.L168
 2682              	.L177:
1831:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2683              		.loc 1 1831 11 is_stmt 1 view .LVU865
 2684 01a8 2846     		mov	r0, r5
 2685 01aa FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback
 2686              	.LVL206:
 2687 01ae 74E7     		b	.L168
 2688              	.L207:
1857:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2689              		.loc 1 1857 7 view .LVU866
 2690 01b0 2B68     		ldr	r3, [r5]
 2691 01b2 0822     		movs	r2, #8
 2692 01b4 DA60     		str	r2, [r3, #12]
1865:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2693              		.loc 1 1865 7 view .LVU867
 2694 01b6 2846     		mov	r0, r5
 2695 01b8 FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback
 2696              	.LVL207:
 2697 01bc 7EE7     		b	.L179
 2698              	.L208:
1882:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2699              		.loc 1 1882 7 view .LVU868
 2700 01be 2846     		mov	r0, r5
 2701 01c0 FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback
 2702              	.LVL208:
 2703 01c4 82E7     		b	.L180
 2704              	.L209:
1906:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2705              		.loc 1 1906 7 view .LVU869
 2706 01c6 2B68     		ldr	r3, [r5]
 2707 01c8 0822     		movs	r2, #8
 2708 01ca 1A61     		str	r2, [r3, #16]
1914:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2709              		.loc 1 1914 7 view .LVU870
 2710 01cc 2846     		mov	r0, r5
 2711 01ce FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback
 2712              	.LVL209:
 2713 01d2 8CE7     		b	.L182
 2714              	.L210:
1931:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2715              		.loc 1 1931 7 view .LVU871
 2716 01d4 2846     		mov	r0, r5
 2717 01d6 FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback
 2718              	.LVL210:
 2719 01da 90E7     		b	.L183
 2720              	.L211:
1942:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/cc0fpaGl.s 			page 114


 2721              		.loc 1 1942 7 view .LVU872
 2722 01dc 2B68     		ldr	r3, [r5]
 2723 01de 1022     		movs	r2, #16
 2724 01e0 5A60     		str	r2, [r3, #4]
1950:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2725              		.loc 1 1950 7 view .LVU873
 2726 01e2 2846     		mov	r0, r5
 2727 01e4 FFF7FEFF 		bl	HAL_CAN_SleepCallback
 2728              	.LVL211:
 2729 01e8 8FE7     		b	.L184
 2730              	.L212:
1961:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2731              		.loc 1 1961 7 view .LVU874
 2732 01ea 2B68     		ldr	r3, [r5]
 2733 01ec 0822     		movs	r2, #8
 2734 01ee 5A60     		str	r2, [r3, #4]
1969:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2735              		.loc 1 1969 7 view .LVU875
 2736 01f0 2846     		mov	r0, r5
 2737 01f2 FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback
 2738              	.LVL212:
 2739 01f6 8EE7     		b	.L185
 2740              	.LVL213:
 2741              	.L213:
2013:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2742              		.loc 1 2013 9 is_stmt 0 view .LVU876
 2743 01f8 B9F1100F 		cmp	r9, #16
 2744 01fc 01D1     		bne	.L196
2017:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2745              		.loc 1 2017 13 is_stmt 1 view .LVU877
2017:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2746              		.loc 1 2017 23 is_stmt 0 view .LVU878
 2747 01fe 46F00806 		orr	r6, r6, #8
 2748              	.LVL214:
2018:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1):
 2749              		.loc 1 2018 13 is_stmt 1 view .LVU879
 2750              	.L196:
2044:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 2751              		.loc 1 2044 9 view .LVU880
 2752 0202 2A68     		ldr	r2, [r5]
 2753 0204 9369     		ldr	r3, [r2, #24]
 2754 0206 23F07003 		bic	r3, r3, #112
 2755 020a 9361     		str	r3, [r2, #24]
 2756              	.L187:
2049:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2757              		.loc 1 2049 5 view .LVU881
 2758 020c 2B68     		ldr	r3, [r5]
 2759 020e 0422     		movs	r2, #4
 2760 0210 5A60     		str	r2, [r3, #4]
 2761              	.L186:
2053:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2762              		.loc 1 2053 3 view .LVU882
2053:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2763              		.loc 1 2053 6 is_stmt 0 view .LVU883
 2764 0212 9EB9     		cbnz	r6, .L214
 2765              	.LVL215:
 2766              	.L167:
ARM GAS  /tmp/cc0fpaGl.s 			page 115


2067:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2767              		.loc 1 2067 1 view .LVU884
 2768 0214 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2769              	.LVL216:
 2770              	.L192:
2013:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2771              		.loc 1 2013 9 view .LVU885
 2772 0218 B9F1500F 		cmp	r9, #80
 2773 021c 0BD0     		beq	.L197
 2774 021e B9F1600F 		cmp	r9, #96
 2775 0222 EED1     		bne	.L196
2037:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2776              		.loc 1 2037 13 is_stmt 1 view .LVU886
2037:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2777              		.loc 1 2037 23 is_stmt 0 view .LVU887
 2778 0224 46F48076 		orr	r6, r6, #256
 2779              	.LVL217:
2038:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           default:
 2780              		.loc 1 2038 13 is_stmt 1 view .LVU888
 2781 0228 EBE7     		b	.L196
 2782              	.L193:
2021:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2783              		.loc 1 2021 13 view .LVU889
2021:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2784              		.loc 1 2021 23 is_stmt 0 view .LVU890
 2785 022a 46F01006 		orr	r6, r6, #16
 2786              	.LVL218:
2022:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 2787              		.loc 1 2022 13 is_stmt 1 view .LVU891
 2788 022e E8E7     		b	.L196
 2789              	.L191:
2029:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2790              		.loc 1 2029 13 view .LVU892
2029:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2791              		.loc 1 2029 23 is_stmt 0 view .LVU893
 2792 0230 46F04006 		orr	r6, r6, #64
 2793              	.LVL219:
2030:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 2794              		.loc 1 2030 13 is_stmt 1 view .LVU894
 2795 0234 E5E7     		b	.L196
 2796              	.L197:
2033:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2797              		.loc 1 2033 13 view .LVU895
2033:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2798              		.loc 1 2033 23 is_stmt 0 view .LVU896
 2799 0236 46F08006 		orr	r6, r6, #128
 2800              	.LVL220:
2034:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 2801              		.loc 1 2034 13 is_stmt 1 view .LVU897
 2802 023a E2E7     		b	.L196
 2803              	.L214:
2056:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2804              		.loc 1 2056 5 view .LVU898
2056:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2805              		.loc 1 2056 21 is_stmt 0 view .LVU899
 2806 023c 6B6A     		ldr	r3, [r5, #36]
 2807 023e 1E43     		orrs	r6, r6, r3
ARM GAS  /tmp/cc0fpaGl.s 			page 116


 2808              	.LVL221:
2056:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2809              		.loc 1 2056 21 view .LVU900
 2810 0240 6E62     		str	r6, [r5, #36]
2064:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2811              		.loc 1 2064 5 is_stmt 1 view .LVU901
 2812 0242 2846     		mov	r0, r5
 2813 0244 FFF7FEFF 		bl	HAL_CAN_ErrorCallback
 2814              	.LVL222:
2067:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2815              		.loc 1 2067 1 is_stmt 0 view .LVU902
 2816 0248 E4E7     		b	.L167
 2817              		.cfi_endproc
 2818              	.LFE84:
 2820              		.section	.text.HAL_CAN_GetState,"ax",%progbits
 2821              		.align	1
 2822              		.global	HAL_CAN_GetState
 2823              		.syntax unified
 2824              		.thumb
 2825              		.thumb_func
 2827              	HAL_CAN_GetState:
 2828              	.LVL223:
 2829              	.LFB98:
2318:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2319:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2320:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
2321:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2322:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2323:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
2324:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief   CAN Peripheral State functions
2325:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
2326:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
2327:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
2328:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             ##### Peripheral State and Error functions #####
2329:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
2330:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
2331:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     This subsection provides functions allowing to :
2332:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
2333:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
2334:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
2335:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2336:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
2337:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
2338:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2339:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2340:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2341:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return the CAN state.
2342:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2343:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2344:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL state
2345:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2346:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
2347:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2830              		.loc 1 2347 1 is_stmt 1 view -0
 2831              		.cfi_startproc
 2832              		@ args = 0, pretend = 0, frame = 0
 2833              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc0fpaGl.s 			page 117


 2834              		@ link register save eliminated.
 2835              		.loc 1 2347 1 is_stmt 0 view .LVU904
 2836 0000 0246     		mov	r2, r0
2348:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2837              		.loc 1 2348 3 is_stmt 1 view .LVU905
 2838              		.loc 1 2348 24 is_stmt 0 view .LVU906
 2839 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2840 0006 D8B2     		uxtb	r0, r3
 2841              	.LVL224:
2349:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2350:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2842              		.loc 1 2350 3 is_stmt 1 view .LVU907
 2843              		.loc 1 2350 38 is_stmt 0 view .LVU908
 2844 0008 013B     		subs	r3, r3, #1
 2845 000a DBB2     		uxtb	r3, r3
 2846              		.loc 1 2350 6 view .LVU909
 2847 000c 012B     		cmp	r3, #1
 2848 000e 00D9     		bls	.L219
 2849              	.LVL225:
 2850              	.L216:
2351:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2352:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
2353:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
2354:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
2355:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
2356:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Sleep mode is active */
2357:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
2358:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
2359:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check sleep mode request flag */
2360:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
2361:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
2362:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Sleep mode request is pending */
2363:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
2364:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
2365:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
2366:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
2367:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Neither sleep mode request nor sleep mode acknowledge */
2368:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2851              		.loc 1 2368 5 is_stmt 1 view .LVU910
2369:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
2370:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2371:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return CAN state */
2372:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return state;
 2852              		.loc 1 2372 3 view .LVU911
2373:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2853              		.loc 1 2373 1 is_stmt 0 view .LVU912
 2854 0010 7047     		bx	lr
 2855              	.LVL226:
 2856              	.L219:
2354:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2857              		.loc 1 2354 5 is_stmt 1 view .LVU913
2354:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2858              		.loc 1 2354 14 is_stmt 0 view .LVU914
 2859 0012 1368     		ldr	r3, [r2]
2354:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2860              		.loc 1 2354 24 view .LVU915
 2861 0014 5A68     		ldr	r2, [r3, #4]
ARM GAS  /tmp/cc0fpaGl.s 			page 118


 2862              	.LVL227:
2354:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2863              		.loc 1 2354 8 view .LVU916
 2864 0016 12F0020F 		tst	r2, #2
 2865 001a 05D1     		bne	.L217
2360:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2866              		.loc 1 2360 10 is_stmt 1 view .LVU917
2360:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2867              		.loc 1 2360 29 is_stmt 0 view .LVU918
 2868 001c 1B68     		ldr	r3, [r3]
2360:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2869              		.loc 1 2360 13 view .LVU919
 2870 001e 13F0020F 		tst	r3, #2
 2871 0022 F5D0     		beq	.L216
2363:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2872              		.loc 1 2363 13 view .LVU920
 2873 0024 0320     		movs	r0, #3
 2874              	.LVL228:
2363:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2875              		.loc 1 2363 13 view .LVU921
 2876 0026 F3E7     		b	.L216
 2877              	.LVL229:
 2878              	.L217:
2357:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2879              		.loc 1 2357 13 view .LVU922
 2880 0028 0420     		movs	r0, #4
 2881              	.LVL230:
2357:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2882              		.loc 1 2357 13 view .LVU923
 2883 002a 7047     		bx	lr
 2884              		.cfi_endproc
 2885              	.LFE98:
 2887              		.section	.text.HAL_CAN_GetError,"ax",%progbits
 2888              		.align	1
 2889              		.global	HAL_CAN_GetError
 2890              		.syntax unified
 2891              		.thumb
 2892              		.thumb_func
 2894              	HAL_CAN_GetError:
 2895              	.LVL231:
 2896              	.LFB99:
2374:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2375:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2376:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return the CAN error code.
2377:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2378:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2379:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval CAN Error Code
2380:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2381:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
2382:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2897              		.loc 1 2382 1 is_stmt 1 view -0
 2898              		.cfi_startproc
 2899              		@ args = 0, pretend = 0, frame = 0
 2900              		@ frame_needed = 0, uses_anonymous_args = 0
 2901              		@ link register save eliminated.
2383:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return CAN error code */
2384:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return hcan->ErrorCode;
ARM GAS  /tmp/cc0fpaGl.s 			page 119


 2902              		.loc 1 2384 3 view .LVU925
 2903              		.loc 1 2384 14 is_stmt 0 view .LVU926
 2904 0000 406A     		ldr	r0, [r0, #36]
 2905              	.LVL232:
2385:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2906              		.loc 1 2385 1 view .LVU927
 2907 0002 7047     		bx	lr
 2908              		.cfi_endproc
 2909              	.LFE99:
 2911              		.section	.text.HAL_CAN_ResetError,"ax",%progbits
 2912              		.align	1
 2913              		.global	HAL_CAN_ResetError
 2914              		.syntax unified
 2915              		.thumb
 2916              		.thumb_func
 2918              	HAL_CAN_ResetError:
 2919              	.LVL233:
 2920              	.LFB100:
2386:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2387:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2388:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Reset the CAN error code.
2389:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2390:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2391:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
2392:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2393:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
2394:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2921              		.loc 1 2394 1 is_stmt 1 view -0
 2922              		.cfi_startproc
 2923              		@ args = 0, pretend = 0, frame = 0
 2924              		@ frame_needed = 0, uses_anonymous_args = 0
 2925              		@ link register save eliminated.
2395:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 2926              		.loc 1 2395 3 view .LVU929
2396:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2927              		.loc 1 2396 3 view .LVU930
 2928              		.loc 1 2396 24 is_stmt 0 view .LVU931
 2929 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2930              	.LVL234:
2397:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2398:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2931              		.loc 1 2398 3 is_stmt 1 view .LVU932
 2932              		.loc 1 2398 38 is_stmt 0 view .LVU933
 2933 0004 013B     		subs	r3, r3, #1
 2934              	.LVL235:
 2935              		.loc 1 2398 38 view .LVU934
 2936 0006 DBB2     		uxtb	r3, r3
 2937              		.loc 1 2398 6 view .LVU935
 2938 0008 012B     		cmp	r3, #1
 2939 000a 05D9     		bls	.L224
2399:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2400:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
2401:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Reset CAN error code */
2402:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode = 0U;
2403:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
2404:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
2405:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
ARM GAS  /tmp/cc0fpaGl.s 			page 120


2406:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
2407:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2940              		.loc 1 2407 5 is_stmt 1 view .LVU936
 2941              		.loc 1 2407 21 is_stmt 0 view .LVU937
 2942 000c 436A     		ldr	r3, [r0, #36]
 2943 000e 43F48023 		orr	r3, r3, #262144
 2944 0012 4362     		str	r3, [r0, #36]
2408:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2409:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     status = HAL_ERROR;
 2945              		.loc 1 2409 5 is_stmt 1 view .LVU938
 2946              	.LVL236:
 2947              		.loc 1 2409 12 is_stmt 0 view .LVU939
 2948 0014 0120     		movs	r0, #1
 2949              	.LVL237:
2410:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
2411:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2412:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return the status */
2413:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
 2950              		.loc 1 2413 3 is_stmt 1 view .LVU940
2414:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2951              		.loc 1 2414 1 is_stmt 0 view .LVU941
 2952 0016 7047     		bx	lr
 2953              	.LVL238:
 2954              	.L224:
2402:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2955              		.loc 1 2402 5 is_stmt 1 view .LVU942
2402:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2956              		.loc 1 2402 21 is_stmt 0 view .LVU943
 2957 0018 0023     		movs	r3, #0
 2958 001a 4362     		str	r3, [r0, #36]
2395:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2959              		.loc 1 2395 21 view .LVU944
 2960 001c 1846     		mov	r0, r3
 2961              	.LVL239:
2395:drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2962              		.loc 1 2395 21 view .LVU945
 2963 001e 7047     		bx	lr
 2964              		.cfi_endproc
 2965              	.LFE100:
 2967              		.text
 2968              	.Letext0:
 2969              		.file 3 "/home/nazar/gcc-arm/arm-none-eabi/include/machine/_default_types.h"
 2970              		.file 4 "/home/nazar/gcc-arm/arm-none-eabi/include/sys/_stdint.h"
 2971              		.file 5 "drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 2972              		.file 6 "drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 2973              		.file 7 "drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2974              		.file 8 "drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 2975              		.file 9 "drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/cc0fpaGl.s 			page 121


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_can.c
     /tmp/cc0fpaGl.s:18     .text.HAL_CAN_MspInit:0000000000000000 $t
     /tmp/cc0fpaGl.s:24     .text.HAL_CAN_MspInit:0000000000000000 HAL_CAN_MspInit
     /tmp/cc0fpaGl.s:40     .text.HAL_CAN_Init:0000000000000000 $t
     /tmp/cc0fpaGl.s:46     .text.HAL_CAN_Init:0000000000000000 HAL_CAN_Init
     /tmp/cc0fpaGl.s:336    .text.HAL_CAN_MspDeInit:0000000000000000 $t
     /tmp/cc0fpaGl.s:342    .text.HAL_CAN_MspDeInit:0000000000000000 HAL_CAN_MspDeInit
     /tmp/cc0fpaGl.s:357    .text.HAL_CAN_ConfigFilter:0000000000000000 $t
     /tmp/cc0fpaGl.s:363    .text.HAL_CAN_ConfigFilter:0000000000000000 HAL_CAN_ConfigFilter
     /tmp/cc0fpaGl.s:569    .text.HAL_CAN_Start:0000000000000000 $t
     /tmp/cc0fpaGl.s:575    .text.HAL_CAN_Start:0000000000000000 HAL_CAN_Start
     /tmp/cc0fpaGl.s:673    .text.HAL_CAN_Stop:0000000000000000 $t
     /tmp/cc0fpaGl.s:679    .text.HAL_CAN_Stop:0000000000000000 HAL_CAN_Stop
     /tmp/cc0fpaGl.s:778    .text.HAL_CAN_DeInit:0000000000000000 $t
     /tmp/cc0fpaGl.s:784    .text.HAL_CAN_DeInit:0000000000000000 HAL_CAN_DeInit
     /tmp/cc0fpaGl.s:840    .text.HAL_CAN_RequestSleep:0000000000000000 $t
     /tmp/cc0fpaGl.s:846    .text.HAL_CAN_RequestSleep:0000000000000000 HAL_CAN_RequestSleep
     /tmp/cc0fpaGl.s:895    .text.HAL_CAN_WakeUp:0000000000000000 $t
     /tmp/cc0fpaGl.s:901    .text.HAL_CAN_WakeUp:0000000000000000 HAL_CAN_WakeUp
     /tmp/cc0fpaGl.s:998    .text.HAL_CAN_WakeUp:0000000000000054 $d
     /tmp/cc0fpaGl.s:1003   .text.HAL_CAN_IsSleepActive:0000000000000000 $t
     /tmp/cc0fpaGl.s:1009   .text.HAL_CAN_IsSleepActive:0000000000000000 HAL_CAN_IsSleepActive
     /tmp/cc0fpaGl.s:1059   .text.HAL_CAN_AddTxMessage:0000000000000000 $t
     /tmp/cc0fpaGl.s:1065   .text.HAL_CAN_AddTxMessage:0000000000000000 HAL_CAN_AddTxMessage
     /tmp/cc0fpaGl.s:1280   .text.HAL_CAN_AbortTxRequest:0000000000000000 $t
     /tmp/cc0fpaGl.s:1286   .text.HAL_CAN_AbortTxRequest:0000000000000000 HAL_CAN_AbortTxRequest
     /tmp/cc0fpaGl.s:1361   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 $t
     /tmp/cc0fpaGl.s:1367   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 HAL_CAN_GetTxMailboxesFreeLevel
     /tmp/cc0fpaGl.s:1438   .text.HAL_CAN_IsTxMessagePending:0000000000000000 $t
     /tmp/cc0fpaGl.s:1444   .text.HAL_CAN_IsTxMessagePending:0000000000000000 HAL_CAN_IsTxMessagePending
     /tmp/cc0fpaGl.s:1501   .text.HAL_CAN_GetTxTimestamp:0000000000000000 $t
     /tmp/cc0fpaGl.s:1507   .text.HAL_CAN_GetTxTimestamp:0000000000000000 HAL_CAN_GetTxTimestamp
     /tmp/cc0fpaGl.s:1582   .text.HAL_CAN_GetRxMessage:0000000000000000 $t
     /tmp/cc0fpaGl.s:1588   .text.HAL_CAN_GetRxMessage:0000000000000000 HAL_CAN_GetRxMessage
     /tmp/cc0fpaGl.s:1877   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 $t
     /tmp/cc0fpaGl.s:1883   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 HAL_CAN_GetRxFifoFillLevel
     /tmp/cc0fpaGl.s:1945   .text.HAL_CAN_ActivateNotification:0000000000000000 $t
     /tmp/cc0fpaGl.s:1951   .text.HAL_CAN_ActivateNotification:0000000000000000 HAL_CAN_ActivateNotification
     /tmp/cc0fpaGl.s:2003   .text.HAL_CAN_DeactivateNotification:0000000000000000 $t
     /tmp/cc0fpaGl.s:2009   .text.HAL_CAN_DeactivateNotification:0000000000000000 HAL_CAN_DeactivateNotification
     /tmp/cc0fpaGl.s:2061   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/cc0fpaGl.s:2067   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/cc0fpaGl.s:2082   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/cc0fpaGl.s:2088   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/cc0fpaGl.s:2103   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/cc0fpaGl.s:2109   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/cc0fpaGl.s:2124   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 $t
     /tmp/cc0fpaGl.s:2130   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 HAL_CAN_TxMailbox0AbortCallback
     /tmp/cc0fpaGl.s:2145   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 $t
     /tmp/cc0fpaGl.s:2151   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 HAL_CAN_TxMailbox1AbortCallback
     /tmp/cc0fpaGl.s:2166   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 $t
     /tmp/cc0fpaGl.s:2172   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 HAL_CAN_TxMailbox2AbortCallback
     /tmp/cc0fpaGl.s:2187   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/cc0fpaGl.s:2193   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/cc0fpaGl.s:2208   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/cc0fpaGl.s:2214   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
ARM GAS  /tmp/cc0fpaGl.s 			page 122


     /tmp/cc0fpaGl.s:2229   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/cc0fpaGl.s:2235   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/cc0fpaGl.s:2250   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 $t
     /tmp/cc0fpaGl.s:2256   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 HAL_CAN_RxFifo1FullCallback
     /tmp/cc0fpaGl.s:2271   .text.HAL_CAN_SleepCallback:0000000000000000 $t
     /tmp/cc0fpaGl.s:2277   .text.HAL_CAN_SleepCallback:0000000000000000 HAL_CAN_SleepCallback
     /tmp/cc0fpaGl.s:2292   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 $t
     /tmp/cc0fpaGl.s:2298   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 HAL_CAN_WakeUpFromRxMsgCallback
     /tmp/cc0fpaGl.s:2313   .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/cc0fpaGl.s:2319   .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
     /tmp/cc0fpaGl.s:2334   .text.HAL_CAN_IRQHandler:0000000000000000 $t
     /tmp/cc0fpaGl.s:2340   .text.HAL_CAN_IRQHandler:0000000000000000 HAL_CAN_IRQHandler
     /tmp/cc0fpaGl.s:2821   .text.HAL_CAN_GetState:0000000000000000 $t
     /tmp/cc0fpaGl.s:2827   .text.HAL_CAN_GetState:0000000000000000 HAL_CAN_GetState
     /tmp/cc0fpaGl.s:2888   .text.HAL_CAN_GetError:0000000000000000 $t
     /tmp/cc0fpaGl.s:2894   .text.HAL_CAN_GetError:0000000000000000 HAL_CAN_GetError
     /tmp/cc0fpaGl.s:2912   .text.HAL_CAN_ResetError:0000000000000000 $t
     /tmp/cc0fpaGl.s:2918   .text.HAL_CAN_ResetError:0000000000000000 HAL_CAN_ResetError

UNDEFINED SYMBOLS
HAL_GetTick
